{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AACA,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/slider.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;0BAET,8OAAC,kKAAA,CAAA,QAAqB;gBAAC,WAAU;0BAC/B,cAAA,8OAAC,kKAAA,CAAA,QAAqB;oBAAC,WAAU;;;;;;;;;;;0BAEnC,8OAAC,kKAAA,CAAA,QAAqB;gBAAC,WAAU;;;;;;;;;;;;AAGrC,OAAO,WAAW,GAAG,kKAAA,CAAA,OAAoB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/schemas/crop-form-schema.ts"],"sourcesContent":["import * as z from \"zod\";\n\nconst TEMP_MIN = 0;\nconst TEMP_MAX = 45;\nconst HUMIDITY_MIN = 0;\nconst HUMIDITY_MAX = 100;\nconst RAINFALL_MIN = 0;\nconst RAINFALL_MAX = 300;\n\nconst NITROGEN_MIN = 0;\nconst NITROGEN_MAX = 140;\nconst PHOSPHORUS_MIN = 5;\nconst PHOSPHORUS_MAX = 145;\nconst POTASSIUM_MIN = 5;\nconst POTASSIUM_MAX = 205;\nconst PH_MIN = 3.5;\nconst PH_MAX = 10.0;\n\n\nexport const CropFormSchema = z.object({\n  location: z.string().min(3, {\n    message: \"Location must be at least 3 characters.\",\n  }).max(100, { message: \"Location must be under 100 characters.\"}),\n  desiredCrops: z.string().max(200, { message: \"Desired crops list too long (max 200 chars).\"}).optional(),\n  soilType: z.string().max(100, { message: \"Soil type description too long (max 100 chars).\"}).optional(),\n\n  temperature: z.number({ coerce: true })\n                .min(TEMP_MIN, `Temperature cannot be below ${TEMP_MIN}°C`)\n                .max(TEMP_MAX, `Temperature cannot exceed ${TEMP_MAX}°C`)\n                .default(25)\n                .describe(`Average temperature in Celsius (Range: ${TEMP_MIN}-${TEMP_MAX})`),\n  humidity: z.number({ coerce: true })\n             .min(HUMIDITY_MIN, `Humidity cannot be below ${HUMIDITY_MIN}%`)\n             .max(HUMIDITY_MAX, `Humidity cannot exceed ${HUMIDITY_MAX}%`)\n             .default(70)\n             .describe(`Average humidity percentage (Range: ${HUMIDITY_MIN}-${HUMIDITY_MAX})`),\n  rainfall: z.number({ coerce: true })\n             .min(RAINFALL_MIN, `Rainfall cannot be below ${RAINFALL_MIN}mm`)\n             .max(RAINFALL_MAX, `Rainfall cannot exceed ${RAINFALL_MAX}mm`)\n             .default(100)\n             .describe(`Average monthly rainfall in mm (Range: ${RAINFALL_MIN}-${RAINFALL_MAX})`),\n \n  nitrogen: z.number({ coerce: true })\n            .min(NITROGEN_MIN, `Nitrogen cannot be below ${NITROGEN_MIN} kg/ha`)\n            .max(NITROGEN_MAX, `Nitrogen cannot exceed ${NITROGEN_MAX} kg/ha`)\n            .default(50)\n            .describe(`Nitrogen (N) content in kg/ha (Range: ${NITROGEN_MIN}-${NITROGEN_MAX})`),\n  phosphorus: z.number({ coerce: true })\n            .min(PHOSPHORUS_MIN, `Phosphorus cannot be below ${PHOSPHORUS_MIN} kg/ha`)\n            .max(PHOSPHORUS_MAX, `Phosphorus cannot exceed ${PHOSPHORUS_MAX} kg/ha`)\n            .default(82)\n            .describe(`Phosphorus (P) content in kg/ha (Range: ${PHOSPHORUS_MIN}-${PHOSPHORUS_MAX})`),\n  potassium: z.number({ coerce: true })\n            .min(POTASSIUM_MIN, `Potassium cannot be below ${POTASSIUM_MIN} kg/ha`)\n            .max(POTASSIUM_MAX, `Potassium cannot exceed ${POTASSIUM_MAX} kg/ha`)\n            .default(50)\n            .describe(`Potassium (K) content in kg/ha (Range: ${POTASSIUM_MIN}-${POTASSIUM_MAX})`),\n  ph: z.number({ coerce: true })\n        .min(PH_MIN, `pH cannot be below ${PH_MIN}`)\n        .max(PH_MAX, `pH cannot exceed ${PH_MAX}`)\n        .step(0.01) \n        .default(6.60)\n        .describe(`Soil pH value (Range: ${PH_MIN}-${PH_MAX})`),\n  historicalYieldData: z.string().max(500, { message: \"Historical yield data too long (max 500 chars).\"}).optional(),\n  otherParameters: z.string().max(500, { message: \"Other parameters description too long (max 500 chars).\"}).optional(),\n  otherRelevantParameters: z.string().max(500,{ message : \"other Relevant Parameters too long (max 500 chars).\"}).optional(),\n})\n.extend({ \n    temperature: z.number({ coerce: true })\n                  .min(TEMP_MIN).max(TEMP_MAX).default(25)\n                  .describe(`Average temperature in Celsius (Range: ${TEMP_MIN}-${TEMP_MAX})`)\n                  .refine(val => val >= TEMP_MIN && val <= TEMP_MAX, { message: 'Out of range' }),\n    humidity: z.number({ coerce: true })\n               .min(HUMIDITY_MIN).max(HUMIDITY_MAX).default(70)\n               .describe(`Average humidity percentage (Range: ${HUMIDITY_MIN}-${HUMIDITY_MAX})`)\n               .refine(val => val >= HUMIDITY_MIN && val <= HUMIDITY_MAX, { message: 'Out of range' }),\n    rainfall: z.number({ coerce: true })\n               .min(RAINFALL_MIN).max(RAINFALL_MAX).default(100)\n               .describe(`Average monthly rainfall in mm (Range: ${RAINFALL_MIN}-${RAINFALL_MAX})`)\n               .refine(val => val >= RAINFALL_MIN && val <= RAINFALL_MAX, { message: 'Out of range' }),\n    // Add refinements for new soil parameters\n     nitrogen: z.number({ coerce: true })\n               .min(NITROGEN_MIN).max(NITROGEN_MAX).default(50)\n               .describe(`Nitrogen (N) content in kg/ha (Range: ${NITROGEN_MIN}-${NITROGEN_MAX})`)\n               .refine(val => val >= NITROGEN_MIN && val <= NITROGEN_MAX, { message: 'Out of range' }),\n     phosphorus: z.number({ coerce: true })\n               .min(PHOSPHORUS_MIN).max(PHOSPHORUS_MAX).default(82)\n               .describe(`Phosphorus (P) content in kg/ha (Range: ${PHOSPHORUS_MIN}-${PHOSPHORUS_MAX})`)\n               .refine(val => val >= PHOSPHORUS_MIN && val <= PHOSPHORUS_MAX, { message: 'Out of range' }),\n    potassium: z.number({ coerce: true })\n               .min(POTASSIUM_MIN).max(POTASSIUM_MAX).default(50)\n               .describe(`Potassium (K) content in kg/ha (Range: ${POTASSIUM_MIN}-${POTASSIUM_MAX})`)\n               .refine(val => val >= POTASSIUM_MIN && val <= POTASSIUM_MAX, { message: 'Out of range' }),\n    ph: z.number({ coerce: true })\n        .min(PH_MIN).max(PH_MAX).step(0.01).default(6.60)\n        .describe(`Soil pH value (Range: ${PH_MIN}-${PH_MAX})`)\n        .refine(val => val >= PH_MIN && val <= PH_MAX, { message: 'Out of range' }),\n});\n\n\n// Type alias for convenience\nexport type CropFormData = z.infer<typeof CropFormSchema>;\n\n// Extract min/max for easier access in components\nexport const CropFormSchemaRanges = {\n  temperature: { min: TEMP_MIN, max: TEMP_MAX },\n  humidity: { min: HUMIDITY_MIN, max: HUMIDITY_MAX },\n  rainfall: { min: RAINFALL_MIN, max: RAINFALL_MAX },\n  nitrogen: { min: NITROGEN_MIN, max: NITROGEN_MAX },\n  phosphorus: { min: PHOSPHORUS_MIN, max: PHOSPHORUS_MAX },\n  potassium: { min: POTASSIUM_MIN, max: POTASSIUM_MAX },\n  ph: { min: PH_MIN, max: PH_MAX },\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/reverse-geocode.ts"],"sourcesContent":["'use server';\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst ReverseGeocodeInputSchema = z.object({\n  latitude: z.number().describe('The latitude coordinate.'),\n  longitude: z.number().describe('The longitude coordinate.'),\n});\nexport type ReverseGeocodeInput = z.infer<typeof ReverseGeocodeInputSchema>;\n\nconst ReverseGeocodeOutputSchema = z.object({\n  locationDescription: z\n    .string()\n    .describe('A general description of the location based on the coordinates, e.g., \"near Sacramento, California, USA\". Include city, state/region, and country if possible.'),\n});\nexport type ReverseGeocodeOutput = z.infer<typeof ReverseGeocodeOutputSchema>;\n\nexport async function reverseGeocode(input: ReverseGeocodeInput): Promise<ReverseGeocodeOutput> {\n  return reverseGeocodeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'reverseGeocodePrompt',\n  input: {\n    schema: z.object({\n      latitude: z.number().describe('The latitude.'),\n      longitude: z.number().describe('The longitude.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      locationDescription: z\n        .string()\n        .describe('A general description of the location, including city, state/region, and country.'),\n    }),\n  },\n  prompt: `Based on the provided latitude and longitude coordinates, describe the general location. Include the city, state/region, and country if possible. Be concise.\n\nLatitude: {{{latitude}}}\nLongitude: {{{longitude}}}\n`,\n});\n\nconst reverseGeocodeFlow = ai.defineFlow<\n  typeof ReverseGeocodeInputSchema,\n  typeof ReverseGeocodeOutputSchema\n>(\n  {\n    name: 'reverseGeocodeFlow',\n    inputSchema: ReverseGeocodeInputSchema,\n    outputSchema: ReverseGeocodeOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n\n// FORWARD GEOCODING: Location name to coordinates\nexport interface GeocodeInput {\n  location: string;\n}\nexport interface GeocodeOutput {\n  latitude: number;\n  longitude: number;\n  displayName: string;\n}\n\n/**\n * Uses OpenStreetMap Nominatim API to geocode a location name to coordinates.\n */\nexport async function geocode(input: GeocodeInput): Promise<GeocodeOutput | null> {\n  const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(input.location)}`;\n  const res = await fetch(url, {\n    headers: {\n      'User-Agent': 'CropPredictionApp/1.0 (your@email.com)',\n      'Accept-Language': 'en',\n    },\n  });\n  if (!res.ok) return null;\n  const data = await res.json();\n  if (!Array.isArray(data) || data.length === 0) return null;\n  const best = data[0];\n  return {\n    latitude: parseFloat(best.lat),\n    longitude: parseFloat(best.lon),\n    displayName: best.display_name,\n  };\n}\n"],"names":[],"mappings":";;;;;;IAiBsB;IAsDA","debugId":null}},
    {"offset": {"line": 511, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/get-climate-parameters.ts"],"sourcesContent":["'use server';\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst GetClimateParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"Central Valley, California\" or \"Jharkhand, India\".'),\n});\nexport type GetClimateParametersInput = z.infer<typeof GetClimateParametersInputSchema>;\n\nconst GetClimateParametersOutputSchema = z.object({\n  averageTemperatureC: z.number().describe('Estimated average yearly temperature in Celsius for the location.'),\n  averageHumidityPercent: z.number().describe('Estimated average yearly relative humidity percentage for the location.'),\n  averageMonthlyRainfallMM: z.number().describe('Estimated average monthly rainfall in millimeters for the location.'),\n});\nexport type GetClimateParametersOutput = z.infer<typeof GetClimateParametersOutputSchema>;\n\nexport async function getClimateParameters(input: GetClimateParametersInput): Promise<GetClimateParametersOutput> {\n  return getClimateParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'getClimateParametersPrompt',\n  input: {\n    schema: z.object({\n      locationDescription: z.string().describe('The location description.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      averageTemperatureC: z.number().describe('Estimated average yearly temperature in Celsius.'),\n      averageHumidityPercent: z.number().describe('Estimated average yearly relative humidity percentage (0-100).'),\n      averageMonthlyRainfallMM: z.number().describe('Estimated average monthly rainfall in millimeters.'),\n    }),\n  },\n  prompt: `You are an agricultural climate data provider. Based on the provided location description, estimate the typical average environmental parameters. Provide numerical estimates only.\n\nLocation Description: {{{locationDescription}}}\n\nEstimate the following average values for this location:\n- averageTemperatureC: Average monthly temperature in Celsius.\n- averageHumidityPercent: Average monthly relative humidity percentage (0-100).\n- averageMonthlyRainfallMM: Average monthly rainfall in millimeters.\n\nReturn only the numerical estimates in the specified JSON format. Ensure humidity is between 0 and 100.\n`,\n});\n\nconst getClimateParametersFlow = ai.defineFlow<\n  typeof GetClimateParametersInputSchema,\n  typeof GetClimateParametersOutputSchema\n>(\n  {\n    name: 'getClimateParametersFlow',\n    inputSchema: GetClimateParametersInputSchema,\n    outputSchema: GetClimateParametersOutputSchema,\n  },\n  async (input) => {\n    try {\n        const { output } = await prompt(input);\n\n        // Basic validation/clamping for humidity\n        if (output && output.averageHumidityPercent) {\n            output.averageHumidityPercent = Math.max(0, Math.min(100, output.averageHumidityPercent));\n        }\n        // Basic validation/clamping for rainfall\n        if (output && output.averageMonthlyRainfallMM < 0) {\n            output.averageMonthlyRainfallMM = 0;\n        }\n        // Optional: Add similar validation for temperature if needed\n\n        return output!;\n    } catch (error: any) {\n        // Log specific rate limit errors for debugging\n        if (error.message?.includes(\"429\") || error.details?.includes(\"429\")) {\n            console.error(`RATE LIMIT HIT: getClimateParameters for location \"${input.locationDescription}\". Error details:`, error.details || error.message);\n        } else {\n            console.error(`Error in getClimateParametersFlow for location \"${input.locationDescription}\":`, error);\n        }\n        // Re-throw the error to be handled by the calling component\n        throw error;\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;IAgBsB","debugId":null}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/get-soil-parameters.ts"],"sourcesContent":["'use server';\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst GetSoilParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"Central Valley, California\" or \"Coastal region, Florida\".'),\n});\nexport type GetSoilParametersInput = z.infer<typeof GetSoilParametersInputSchema>;\n\nconst GetSoilParametersOutputSchema = z.object({\n  nitrogen_kg_ha: z.number().describe('Estimated typical soil Nitrogen (N) content in kg per hectare for the location.'),\n  phosphorus_kg_ha: z.number().describe('Estimated typical soil Phosphorus (P) content in kg per hectare for the location.'),\n  potassium_kg_ha: z.number().describe('Estimated typical soil Potassium (K) content in kg per hectare for the location.'),\n  ph: z.number().describe('Estimated typical soil pH value for the location.'),\n});\nexport type GetSoilParametersOutput = z.infer<typeof GetSoilParametersOutputSchema>;\n\nexport async function getSoilParameters(input: GetSoilParametersInput): Promise<GetSoilParametersOutput> {\n  return getSoilParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'getSoilParametersPrompt',\n  input: {\n    schema: z.object({\n      locationDescription: z.string().describe('The location description.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      nitrogen_kg_ha: z.number().describe('Estimated typical Nitrogen (N) in kg/ha.'),\n      phosphorus_kg_ha: z.number().describe('Estimated typical Phosphorus (P) in kg/ha.'),\n      potassium_kg_ha: z.number().describe('Estimated typical Potassium (K) in kg/ha.'),\n      ph: z.number().describe('Estimated typical soil pH (e.g., 6.5).'),\n    }),\n  },\n  prompt: `You are an agricultural soil data provider. Based on the provided location description, estimate the typical average soil parameters. Provide numerical estimates only.\n\nLocation Description: {{{locationDescription}}}\n\nEstimate the following average soil values for this location:\n- nitrogen_kg_ha: Typical Nitrogen (N) content in kilograms per hectare (kg/ha).\n- phosphorus_kg_ha: Typical Phosphorus (P) content in kilograms per hectare (kg/ha).\n- potassium_kg_ha: Typical Potassium (K) content in kilograms per hectare (kg/ha).\n- ph: Typical soil pH value (e.g., between 4.0 and 9.0).\n\nReturn only the numerical estimates in the specified JSON format. Ensure pH is within a reasonable range (e.g., 3.5 to 10.0). Provide plausible values based on general knowledge of the location type.\n`,\n});\n\nconst getSoilParametersFlow = ai.defineFlow<\n  typeof GetSoilParametersInputSchema,\n  typeof GetSoilParametersOutputSchema\n>(\n  {\n    name: 'getSoilParametersFlow',\n    inputSchema: GetSoilParametersInputSchema,\n    outputSchema: GetSoilParametersOutputSchema,\n  },\n  async (input) => {\n    try {\n        const { output } = await prompt(input);\n\n        // Basic validation/clamping for pH\n        if (output && output.ph) {\n            output.ph = Math.max(3.5, Math.min(10.0, output.ph)); // Clamp pH between 3.5 and 10.0\n        }\n        // Basic validation for nutrients (ensure non-negative)\n        if (output && output.nitrogen_kg_ha < 0) output.nitrogen_kg_ha = 0;\n        if (output && output.phosphorus_kg_ha < 0) output.phosphorus_kg_ha = 0;\n        if (output && output.potassium_kg_ha < 0) output.potassium_kg_ha = 0;\n\n\n        return output!;\n    } catch (error: any) {\n        if (error.message?.includes(\"429\") || error.details?.includes(\"429\")) {\n            console.error(`RATE LIMIT HIT: getSoilParameters for location \"${input.locationDescription}\". Error details:`, error.details || error.message);\n        } else {\n            console.error(`Error in getSoilParametersFlow for location \"${input.locationDescription}\":`, error);\n        }\n        throw error; // Re-throw to be handled by the calling component\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;IAiBsB","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 616, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/map-placeholder.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport Image from \"next/image\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MapPin, Loader2 } from \"lucide-react\"; // Added Loader2\n\ninterface MapPlaceholderProps {\n  latitude?: number | null;\n  longitude?: number | null;\n  locationName?: string | null;\n  isFetchingLocation?: boolean; // Added prop\n}\n\n// Basic debounce function\nfunction debounce<F extends (...args: any[]) => void>(func: F, wait: number): (...args: Parameters<F>) => void {\n  let timeoutId: ReturnType<typeof setTimeout> | null = null;\n  return function(this: ThisParameterType<F>, ...args: Parameters<F>) {\n    if (timeoutId !== null) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => func.apply(this, args), wait);\n  };\n}\n\n\nexport function MapPlaceholder({ latitude, longitude, locationName, isFetchingLocation }: MapPlaceholderProps) {\n  const [error, setError] = React.useState<string | null>(null);\n\n  // Helper to build OpenStreetMap embed URL\n  const getOsmEmbedUrl = (lat: number, lon: number) => {\n    const zoom = 13;\n    const bboxOffset = 0.03; // ~3km\n    const left = lon - bboxOffset;\n    const right = lon + bboxOffset;\n    const top = lat + bboxOffset;\n    const bottom = lat - bboxOffset;\n    return `https://www.openstreetmap.org/export/embed.html?bbox=${left},${bottom},${right},${top}&layer=mapnik&marker=${lat},${lon}`;\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MapPin className=\"h-5 w-5 text-primary\" />\n          Location Visualizer\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n         {isFetchingLocation && (\n           <div className=\"aspect-video w-full flex items-center justify-center bg-muted/50 rounded-md border border-dashed\">\n             <div className=\"text-center\">\n               <Loader2 className=\"h-6 w-6 animate-spin mx-auto text-primary mb-2\"/>\n               <p className=\"text-muted-foreground text-sm\">Getting current location...</p>\n             </div>\n           </div>\n         )}\n\n        {error && <p className=\"text-destructive text-sm\">{error}</p>}\n\n        {/* Show OpenStreetMap iframe if coordinates are present and not fetching location */}\n        {!isFetchingLocation && !error && latitude != null && longitude != null && (\n          <div className=\"aspect-video w-full relative overflow-hidden rounded-md border\">\n            <iframe\n              title=\"OpenStreetMap\"\n              src={getOsmEmbedUrl(latitude, longitude)}\n              width=\"100%\"\n              height=\"100%\"\n              style={{ border: 0, width: '100%', height: '100%' }}\n              allowFullScreen\n              loading=\"lazy\"\n              referrerPolicy=\"no-referrer-when-downgrade\"\n            />\n          </div>\n        )}\n\n         {/* Show placeholder text if not loading and no map is ready */}\n         {!isFetchingLocation && !error && (latitude == null || longitude == null) && (\n          <div className=\"aspect-video w-full flex items-center justify-center bg-muted/50 rounded-md border border-dashed\">\n            <p className=\"text-muted-foreground text-center p-4 text-sm\">\n              {locationName && !/Coords:/.test(locationName)\n                ? `Map preview will appear here for ${locationName}.`\n                : locationName && /Coords:/.test(locationName)\n                ? 'Map preview appears when using \"Use Current Location\".'\n                : \"Enter a location or use current location to see map preview.\"}\n            </p>\n          </div>\n        )}\n\n         {!isFetchingLocation && locationName && <p className=\"text-sm text-muted-foreground mt-2\">Showing map for: {locationName}</p>}\n         {!isFetchingLocation && latitude != null && longitude != null && (\n           <p className=\"text-xs text-muted-foreground\">Lat: {latitude.toFixed(4)}, Lon: {longitude.toFixed(4)}</p>\n         )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA,6VAAgD,gBAAgB;AAAhE;AALA;;;;;AAcA,0BAA0B;AAC1B,SAAS,SAA6C,IAAO,EAAE,IAAY;IACzE,IAAI,YAAkD;IACtD,OAAO,SAAqC,GAAG,IAAmB;QAChE,IAAI,cAAc,MAAM;YACtB,aAAa;QACf;QACA,YAAY,WAAW,IAAM,KAAK,KAAK,CAAC,IAAI,EAAE,OAAO;IACvD;AACF;AAGO,SAAS,eAAe,EAAE,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,kBAAkB,EAAuB;IAC3G,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAiB;IAExD,0CAA0C;IAC1C,MAAM,iBAAiB,CAAC,KAAa;QACnC,MAAM,OAAO;QACb,MAAM,aAAa,MAAM,OAAO;QAChC,MAAM,OAAO,MAAM;QACnB,MAAM,QAAQ,MAAM;QACpB,MAAM,MAAM,MAAM;QAClB,MAAM,SAAS,MAAM;QACrB,OAAO,CAAC,qDAAqD,EAAE,KAAK,CAAC,EAAE,OAAO,CAAC,EAAE,MAAM,CAAC,EAAE,IAAI,qBAAqB,EAAE,IAAI,CAAC,EAAE,KAAK;IACnI;IAEA,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;0BACT,cAAA,8OAAC,gIAAA,CAAA,YAAS;oBAAC,WAAU;;sCACnB,8OAAC,0MAAA,CAAA,SAAM;4BAAC,WAAU;;;;;;wBAAyB;;;;;;;;;;;;0BAI/C,8OAAC,gIAAA,CAAA,cAAW;;oBACR,oCACC,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,iNAAA,CAAA,UAAO;oCAAC,WAAU;;;;;;8CACnB,8OAAC;oCAAE,WAAU;8CAAgC;;;;;;;;;;;;;;;;;oBAKnD,uBAAS,8OAAC;wBAAE,WAAU;kCAA4B;;;;;;oBAGlD,CAAC,sBAAsB,CAAC,SAAS,YAAY,QAAQ,aAAa,sBACjE,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BACC,OAAM;4BACN,KAAK,eAAe,UAAU;4BAC9B,OAAM;4BACN,QAAO;4BACP,OAAO;gCAAE,QAAQ;gCAAG,OAAO;gCAAQ,QAAQ;4BAAO;4BAClD,eAAe;4BACf,SAAQ;4BACR,gBAAe;;;;;;;;;;;oBAMnB,CAAC,sBAAsB,CAAC,SAAS,CAAC,YAAY,QAAQ,aAAa,IAAI,mBACvE,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAE,WAAU;sCACV,gBAAgB,CAAC,UAAU,IAAI,CAAC,gBAC7B,CAAC,iCAAiC,EAAE,aAAa,CAAC,CAAC,GACnD,gBAAgB,UAAU,IAAI,CAAC,gBAC/B,2DACA;;;;;;;;;;;oBAKR,CAAC,sBAAsB,8BAAgB,8OAAC;wBAAE,WAAU;;4BAAqC;4BAAkB;;;;;;;oBAC3G,CAAC,sBAAsB,YAAY,QAAQ,aAAa,sBACvD,8OAAC;wBAAE,WAAU;;4BAAgC;4BAAM,SAAS,OAAO,CAAC;4BAAG;4BAAQ,UAAU,OAAO,CAAC;;;;;;;;;;;;;;;;;;;AAK5G","debugId":null}},
    {"offset": {"line": 801, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/aspect-ratio.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n\n"],"names":[],"mappings":";;;AAIA;AAHA;;AAKA,MAAM,cAAc,2KAAA,CAAA,OAAyB","debugId":null}},
    {"offset": {"line": 815, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/crop-form.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport Image from \"next/image\";\nimport type * as z from \"zod\";\nimport type { UseFormReturn } from \"react-hook-form\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Loader2, MapPin, Sprout, Thermometer, Droplets, CloudRain, BookOpen, BrainCircuit, LocateFixed, Image as ImageIcon, RefreshCw, Beaker, Atom, Blend } from \"lucide-react\"; // Added soil icons\nimport { CropFormSchema, CropFormSchemaRanges, type CropFormData } from \"@/schemas/crop-form-schema\"; // Import ranges\nimport { reverseGeocode, type ReverseGeocodeInput, geocode, type GeocodeInput } from \"@/ai/flows/reverse-geocode\";\nimport { getClimateParameters, type GetClimateParametersInput, type GetClimateParametersOutput } from \"@/ai/flows/get-climate-parameters\";\nimport { getSoilParameters, type GetSoilParametersInput, type GetSoilParametersOutput } from \"@/ai/flows/get-soil-parameters\"; // Import soil flow\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MapPlaceholder } from \"@/components/map-placeholder\";\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\n// Debounce function\nfunction debounce<F extends (...args: any[]) => void>(func: F, wait: number): F & { cancel?: () => void } {\n  let timeoutId: ReturnType<typeof setTimeout> | null = null;\n\n  const debouncedFn = function(this: ThisParameterType<F>, ...args: Parameters<F>) {\n    const context = this;\n    if (timeoutId !== null) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      func.apply(context, args);\n    }, wait);\n  } as F;\n\n  const cancel = () => {\n    if (timeoutId !== null) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n    }\n  };\n\n  return Object.assign(debouncedFn, { cancel });\n}\n\n\ninterface CropFormProps {\n  form: UseFormReturn<CropFormData>;\n  onSubmit: (values: CropFormData) => void;\n  isLoading: boolean;\n}\n\nexport function CropForm({ form, onSubmit, isLoading }: CropFormProps) {\n  const [isFetchingLocation, setIsFetchingLocation] = React.useState(false);\n  const [isFetchingClimate, setIsFetchingClimate] = React.useState(false);\n  const [isFetchingSoil, setIsFetchingSoil] = React.useState(false); // State for soil fetching\n  const [currentLatitude, setCurrentLatitude] = React.useState<number | null>(null);\n  const [currentLongitude, setCurrentLongitude] = React.useState<number | null>(null);\n  const { toast } = useToast();\n\n   // Watch values to update sliders display\n   const locationValue = form.watch(\"location\");\n   const temperatureValue = form.watch(\"temperature\");\n   const humidityValue = form.watch(\"humidity\");\n   const rainfallValue = form.watch(\"rainfall\");\n   const nitrogenValue = form.watch(\"nitrogen\");\n   const phosphorusValue = form.watch(\"phosphorus\");\n   const potassiumValue = form.watch(\"potassium\");\n   const phValue = form.watch(\"ph\");\n\n  const isFetchingAnyData = isFetchingLocation || isFetchingClimate || isFetchingSoil;\n\n  // fetchAndUpdateClimate function\n  const fetchAndUpdateClimate = React.useCallback(async (location: string) => {\n    if (!location || location.trim().length < 3 || /Coords:/.test(location) || isFetchingClimate) {\n        return;\n    }\n    setIsFetchingClimate(true);\n    toast({\n      title: \"Fetching Climate Data...\",\n      description: `Estimating typical conditions for ${location}.`,\n    });\n    try {\n      const climateInput: GetClimateParametersInput = { locationDescription: location };\n      const climateResult = await getClimateParameters(climateInput);\n\n      const clampedTemp = Math.max(CropFormSchemaRanges.temperature.min, Math.min(CropFormSchemaRanges.temperature.max, climateResult.averageTemperatureC));\n      const clampedHumidity = Math.max(CropFormSchemaRanges.humidity.min, Math.min(CropFormSchemaRanges.humidity.max, climateResult.averageHumidityPercent));\n      const clampedRainfall = Math.max(CropFormSchemaRanges.rainfall.min, Math.min(CropFormSchemaRanges.rainfall.max, climateResult.averageMonthlyRainfallMM));\n\n      form.setValue(\"temperature\", clampedTemp, { shouldValidate: true });\n      form.setValue(\"humidity\", clampedHumidity, { shouldValidate: true });\n      form.setValue(\"rainfall\", clampedRainfall, { shouldValidate: true });\n\n      toast({\n        title: \"Climate Data Updated\",\n        description: `Set average temp, humidity, and rainfall for ${location}. Adjust sliders if needed.`,\n        variant: \"default\",\n      });\n    } catch (error: any) {\n      console.error(\"Error fetching climate data:\", error);\n       const isRateLimitError = error.message?.includes(\"429\") || error.details?.includes(\"429\");\n       const specificError = error.details || error.message || \"Could not estimate climate parameters.\";\n       const userMessage = isRateLimitError\n           ? \"API rate limit reached. Please wait a minute and try fetching climate data again using the refresh button.\"\n           : specificError.length < 100 ? specificError : \"Failed to estimate climate data. Check console.\";\n\n      toast({\n        title: \"Climate Fetch Error\",\n        description: userMessage,\n        variant: isRateLimitError ? \"destructive\" : \"default\",\n      });\n    } finally {\n      setIsFetchingClimate(false);\n    }\n  }, [form, toast, isFetchingClimate]); // Added ranges dep\n\n  // NEW: fetchAndUpdateSoil function\n  const fetchAndUpdateSoil = React.useCallback(async (location: string) => {\n    if (!location || location.trim().length < 3 || /Coords:/.test(location) || isFetchingSoil) {\n      return;\n    }\n    setIsFetchingSoil(true);\n    toast({\n      title: \"Fetching Soil Data...\",\n      description: `Estimating typical soil parameters for ${location}.`,\n    });\n    try {\n      const soilInput: GetSoilParametersInput = { locationDescription: location };\n      const soilResult = await getSoilParameters(soilInput);\n\n      const clampedNitrogen = Math.max(CropFormSchemaRanges.nitrogen.min, Math.min(CropFormSchemaRanges.nitrogen.max, soilResult.nitrogen_kg_ha));\n      const clampedPhosphorus = Math.max(CropFormSchemaRanges.phosphorus.min, Math.min(CropFormSchemaRanges.phosphorus.max, soilResult.phosphorus_kg_ha));\n      const clampedPotassium = Math.max(CropFormSchemaRanges.potassium.min, Math.min(CropFormSchemaRanges.potassium.max, soilResult.potassium_kg_ha));\n      const clampedPh = Math.max(CropFormSchemaRanges.ph.min, Math.min(CropFormSchemaRanges.ph.max, soilResult.ph));\n\n      form.setValue(\"nitrogen\", clampedNitrogen, { shouldValidate: true });\n      form.setValue(\"phosphorus\", clampedPhosphorus, { shouldValidate: true });\n      form.setValue(\"potassium\", clampedPotassium, { shouldValidate: true });\n      form.setValue(\"ph\", clampedPh, { shouldValidate: true });\n\n      toast({\n        title: \"Soil Data Updated\",\n        description: `Set estimated N, P, K, and pH for ${location}. Adjust sliders if needed.`,\n        variant: \"default\",\n      });\n    } catch (error: any) {\n      console.error(\"Error fetching soil data:\", error);\n      const isRateLimitError = error.message?.includes(\"429\") || error.details?.includes(\"429\");\n      const specificError = error.details || error.message || \"Could not estimate soil parameters.\";\n      const userMessage = isRateLimitError\n          ? \"API rate limit reached. Please wait a minute and try fetching soil data again using the refresh button.\"\n          : specificError.length < 100 ? specificError : \"Failed to estimate soil data. Check console.\";\n\n      toast({\n        title: \"Soil Fetch Error\",\n        description: userMessage,\n        variant: isRateLimitError ? \"destructive\" : \"default\",\n      });\n    } finally {\n      setIsFetchingSoil(false);\n    }\n  }, [form, toast, isFetchingSoil]); // Added ranges dep\n\n\n  // Debounced versions\n  const debouncedFetchAndUpdateClimate = React.useMemo(\n    () => debounce(fetchAndUpdateClimate, 2500),\n    [fetchAndUpdateClimate]\n  );\n  const debouncedFetchAndUpdateSoil = React.useMemo(\n      () => debounce(fetchAndUpdateSoil, 2500),\n      [fetchAndUpdateSoil]\n    );\n\n\n  // handleGetCurrentLocation updated to fetch both climate and soil\n  const handleGetCurrentLocation = async () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"Geolocation Error\",\n        description: \"Geolocation is not supported by your browser.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    debouncedFetchAndUpdateClimate.cancel?.();\n    debouncedFetchAndUpdateSoil.cancel?.(); // Cancel soil debounce too\n    setIsFetchingLocation(true);\n    setCurrentLatitude(null);\n    setCurrentLongitude(null);\n    toast({\n      title: \"Fetching Location...\",\n      description: \"Getting your current coordinates. Please allow location access if prompted.\",\n    });\n\n    try {\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\n          enableHighAccuracy: true,\n          timeout: 15000,\n          maximumAge: 0,\n        });\n      });\n\n      const { latitude, longitude } = position.coords;\n      setCurrentLatitude(latitude);\n      setCurrentLongitude(longitude);\n      toast({\n        title: \"Coordinates Found\",\n        description: `Lat: ${latitude.toFixed(4)}, Lon: ${longitude.toFixed(4)}. Getting location description...`,\n      });\n\n      const geoInput: ReverseGeocodeInput = { latitude, longitude };\n      const geoResult = await reverseGeocode(geoInput);\n\n      if (geoResult.locationDescription) {\n        form.setValue(\"location\", geoResult.locationDescription, { shouldValidate: true });\n        toast({\n          title: \"Location Set!\",\n          description: `Location automatically set to: ${geoResult.locationDescription}`,\n           variant: \"default\",\n        });\n        // Trigger both fetches immediately\n        await Promise.all([\n            fetchAndUpdateClimate(geoResult.locationDescription),\n            fetchAndUpdateSoil(geoResult.locationDescription)\n        ]);\n      } else {\n         toast({\n           title: \"Reverse Geocoding Failed\",\n           description: \"Could not determine location description. Please enter manually.\",\n           variant: \"default\",\n         });\n         form.setValue(\"location\", `Coords: ${latitude.toFixed(4)}, ${longitude.toFixed(4)}`, { shouldValidate: true });\n      }\n\n    } catch (error: any) {\n      console.error(\"Error getting location:\", error);\n      let description = \"An unknown error occurred while fetching your location.\";\n      if (error.code === error.PERMISSION_DENIED) {\n        description = \"Permission denied. Please enable location services for this site in your browser settings.\";\n      } else if (error.code === error.POSITION_UNAVAILABLE) {\n        description = \"Location information is unavailable.\";\n      } else if (error.code === error.TIMEOUT) {\n        description = \"The request to get user location timed out.\";\n      } else if (error.message?.includes('reverseGeocode')) {\n          description = `Failed to get location description: ${error.message}`;\n      } else if (error.message?.includes(\"429\")) {\n           description = \"API rate limit reached while fetching location description. Please try again later.\";\n      }\n\n      toast({\n        title: \"Location Error\",\n        description: description,\n        variant: \"destructive\",\n      });\n       setCurrentLatitude(null);\n       setCurrentLongitude(null);\n    } finally {\n      setIsFetchingLocation(false);\n    }\n  };\n\n   // Effect for geocoding location name to coordinates\n   React.useEffect(() => {\n     const location = form.getValues(\"location\");\n     if (!isFetchingLocation && location && !/Coords:/.test(location)) {\n       // Only geocode if not already coordinates and location is not empty\n       (async () => {\n         const result = await geocode({ location });\n         if (result) {\n           setCurrentLatitude(result.latitude);\n           setCurrentLongitude(result.longitude);\n         } else {\n           setCurrentLatitude(null);\n           setCurrentLongitude(null);\n         }\n       })();\n     } else if (!location) {\n       setCurrentLatitude(null);\n       setCurrentLongitude(null);\n     }\n     // If location is Coords:..., do not geocode, let handleGetCurrentLocation handle it\n     // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [locationValue, isFetchingLocation]);\n\n\n   // Wrapper function to fetch both climate and soil\n   const fetchAllDataForLocation = async (location: string) => {\n        debouncedFetchAndUpdateClimate.cancel?.();\n        debouncedFetchAndUpdateSoil.cancel?.();\n        await Promise.all([\n            fetchAndUpdateClimate(location),\n            fetchAndUpdateSoil(location)\n        ]);\n   };\n\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n\n        {/* Location & Desired Crops Section */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 items-start\">\n          <div className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex items-center justify-between gap-2\">\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-5 w-5 text-primary\" />\n                      Location\n                    </FormLabel>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleGetCurrentLocation}\n                      disabled={isFetchingAnyData}\n                      className=\"flex items-center gap-1 text-xs\"\n                    >\n                      {isFetchingLocation ? (\n                        <>\n                          <Loader2 className=\"h-3 w-3 animate-spin mr-1\" />\n                          Fetching...\n                        </>\n                      ) : (\n                        <>\n                          <LocateFixed className=\"h-3 w-3 mr-1\" />\n                          Use Current Location\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                  <FormControl>\n                     <div className=\"flex gap-1\">\n                        <Input\n                           placeholder=\"e.g., Central Valley, California or Coordinates\"\n                           {...field}\n                           disabled={isFetchingAnyData}\n                           onChange={(e) => {\n                               debouncedFetchAndUpdateClimate.cancel?.();\n                               debouncedFetchAndUpdateSoil.cancel?.(); // Cancel soil debounce too\n                               field.onChange(e);\n                           }}\n                         />\n                         <Button\n                           type=\"button\"\n                           variant=\"ghost\"\n                           size=\"icon\"\n                           className=\"flex-shrink-0\"\n                           onClick={() => fetchAllDataForLocation(locationValue)}\n                           disabled={isFetchingAnyData || !locationValue || locationValue.trim().length < 3 || /Coords:/.test(locationValue)}\n                           title=\"Fetch/Refresh climate and soil data based on current location text\"\n                         >\n                           <RefreshCw className={`h-4 w-4 ${(isFetchingClimate || isFetchingSoil) ? 'animate-spin' : ''}`} />\n                         </Button>\n                     </div>\n                  </FormControl>\n                  <FormDescription>\n                    Place name, address, or use button. Use <RefreshCw className=\"inline h-3 w-3 align-text-bottom\"/> to fetch climate & soil.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             <FormField\n              control={form.control}\n              name=\"desiredCrops\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\">\n                    <Sprout className=\"h-5 w-5 text-primary\" />\n                    Desired Crops (Optional)\n                  </FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., tomatoes, lettuce, strawberries\" {...field} disabled={isLoading || isFetchingAnyData}/>\n                  </FormControl>\n                  <FormDescription>\n                    List specific crops you're interested in (comma-separated).\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n           {/* Map Placeholder */}\n            <MapPlaceholder latitude={currentLatitude} longitude={currentLongitude} locationName={locationValue} isFetchingLocation={isFetchingLocation} />\n\n        </div>\n\n        {/* Environmental Parameters Section */}\n        <Card className=\"shadow-sm border border-primary/10 relative\">\n          {(isFetchingClimate || isFetchingLocation) && (\n            <div className=\"absolute inset-0 bg-background/50 flex items-center justify-center z-10 rounded-lg\">\n               <Loader2 className=\"h-6 w-6 animate-spin text-primary\"/>\n               <span className=\"ml-2 text-sm text-primary\">{isFetchingLocation ? 'Getting Location...' : 'Fetching Climate...'}</span>\n            </div>\n          )}\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Environmental Parameters</CardTitle>\n            <CardDescription>Use sliders or fetch typical values based on location using <RefreshCw className=\"inline h-3 w-3 align-text-bottom\"/>. </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6 pt-2\">\n            <FormField\n              control={form.control}\n              name=\"temperature\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <Thermometer className=\"h-5 w-5 text-primary\" />\n                      Avg. Temperature (°C)\n                    </FormLabel>\n                    <span className=\"text-sm font-medium text-primary w-16 text-right\">{temperatureValue.toFixed(1)}°C</span>\n                  </div>\n                  <FormControl>\n                     <Slider\n                       value={[field.value]}\n                       onValueChange={(value) => field.onChange(value[0])}\n                       min={CropFormSchemaRanges.temperature.min}\n                       max={CropFormSchemaRanges.temperature.max}\n                       step={0.5}\n                       aria-label=\"Temperature Slider\"\n                       disabled={isFetchingAnyData}\n                     />\n                  </FormControl>\n                  <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>{CropFormSchemaRanges.temperature.min}°C</span>\n                      <span>{CropFormSchemaRanges.temperature.max}°C</span>\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"humidity\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center mb-2\">\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <Droplets className=\"h-5 w-5 text-primary\" />\n                        Avg. Humidity (%)\n                      </FormLabel>\n                      <span className=\"text-sm font-medium text-primary w-16 text-right\">{humidityValue}%</span>\n                  </div>\n                  <FormControl>\n                    <Slider\n                       value={[field.value]}\n                       onValueChange={(value) => field.onChange(value[0])}\n                       min={CropFormSchemaRanges.humidity.min}\n                       max={CropFormSchemaRanges.humidity.max}\n                       step={1}\n                       aria-label=\"Humidity Slider\"\n                       disabled={isFetchingAnyData}\n                     />\n                  </FormControl>\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>{CropFormSchemaRanges.humidity.min}%</span>\n                      <span>{CropFormSchemaRanges.humidity.max}%</span>\n                    </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             <FormField\n              control={form.control}\n              name=\"rainfall\"\n              render={({ field }) => (\n                <FormItem>\n                   <div className=\"flex justify-between items-center mb-2\">\n                     <FormLabel className=\"flex items-center gap-2\">\n                       <CloudRain className=\"h-5 w-5 text-primary\" />\n                       Avg. Monthly Rainfall (mm)\n                     </FormLabel>\n                     <span className=\"text-sm font-medium text-primary w-16 text-right\">{rainfallValue}mm</span>\n                   </div>\n                  <FormControl>\n                     <Slider\n                        value={[field.value]}\n                        onValueChange={(value) => field.onChange(value[0])}\n                        min={CropFormSchemaRanges.rainfall.min}\n                        max={CropFormSchemaRanges.rainfall.max}\n                        step={5}\n                        aria-label=\"Rainfall Slider\"\n                        disabled={isFetchingAnyData}\n                      />\n                  </FormControl>\n                  <div className=\"flex justify-between text-xs text-muted-foreground\">\n                     <span>{CropFormSchemaRanges.rainfall.min}mm</span>\n                     <span>{CropFormSchemaRanges.rainfall.max}mm</span>\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Soil Parameters Section */}\n        <Card className=\"shadow-sm border border-primary/10 relative\">\n          {(isFetchingSoil || isFetchingLocation) && (\n            <div className=\"absolute inset-0 bg-background/50 flex items-center justify-center z-10 rounded-lg\">\n               <Loader2 className=\"h-6 w-6 animate-spin text-primary\"/>\n               <span className=\"ml-2 text-sm text-primary\">{isFetchingLocation ? 'Getting Location...' : 'Fetching Soil...'}</span>\n            </div>\n          )}\n          <CardHeader>\n              <CardTitle className=\"text-xl\">Soil Parameters</CardTitle>\n              <CardDescription>Use sliders or fetch typical values based on location using <RefreshCw className=\"inline h-3 w-3 align-text-bottom\"/>.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6 pt-2\">\n             <FormField\n               control={form.control}\n               name=\"nitrogen\"\n               render={({ field }) => (\n                 <FormItem>\n                   <div className=\"flex justify-between items-center mb-2\">\n                     <FormLabel className=\"flex items-center gap-2\">\n                       <Atom className=\"h-5 w-5 text-primary\" /> {/* Icon for Nitrogen */}\n                       Nitrogen (N) content (kg/ha)\n                     </FormLabel>\n                     <span className=\"text-sm font-medium text-primary w-16 text-right\">{nitrogenValue} kg/ha</span>\n                   </div>\n                   <FormControl>\n                      <Slider\n                        value={[field.value]}\n                        onValueChange={(value) => field.onChange(value[0])}\n                        min={CropFormSchemaRanges.nitrogen.min}\n                        max={CropFormSchemaRanges.nitrogen.max}\n                        step={1}\n                        aria-label=\"Nitrogen Slider\"\n                        disabled={isFetchingAnyData}\n                      />\n                   </FormControl>\n                   <div className=\"flex justify-between text-xs text-muted-foreground\">\n                       <span>{CropFormSchemaRanges.nitrogen.min}</span>\n                       <span>{CropFormSchemaRanges.nitrogen.max}</span>\n                   </div>\n                   <FormMessage />\n                 </FormItem>\n               )}\n             />\n              <FormField\n               control={form.control}\n               name=\"phosphorus\"\n               render={({ field }) => (\n                 <FormItem>\n                   <div className=\"flex justify-between items-center mb-2\">\n                     <FormLabel className=\"flex items-center gap-2\">\n                        <Blend className=\"h-5 w-5 text-primary\" /> {/* Icon for Phosphorus */}\n                       Phosphorus (P) content (kg/ha)\n                     </FormLabel>\n                     <span className=\"text-sm font-medium text-primary w-16 text-right\">{phosphorusValue} kg/ha</span>\n                   </div>\n                   <FormControl>\n                      <Slider\n                        value={[field.value]}\n                        onValueChange={(value) => field.onChange(value[0])}\n                        min={CropFormSchemaRanges.phosphorus.min}\n                        max={CropFormSchemaRanges.phosphorus.max}\n                        step={1}\n                        aria-label=\"Phosphorus Slider\"\n                        disabled={isFetchingAnyData}\n                      />\n                   </FormControl>\n                   <div className=\"flex justify-between text-xs text-muted-foreground\">\n                       <span>{CropFormSchemaRanges.phosphorus.min}</span>\n                       <span>{CropFormSchemaRanges.phosphorus.max}</span>\n                   </div>\n                   <FormMessage />\n                 </FormItem>\n               )}\n             />\n             <FormField\n               control={form.control}\n               name=\"potassium\"\n               render={({ field }) => (\n                 <FormItem>\n                   <div className=\"flex justify-between items-center mb-2\">\n                     <FormLabel className=\"flex items-center gap-2\">\n                        <Atom className=\"h-5 w-5 text-primary rotate-90\" /> {/* Reused Atom, rotated */}\n                       Potassium (K) content (kg/ha)\n                     </FormLabel>\n                     <span className=\"text-sm font-medium text-primary w-16 text-right\">{potassiumValue} kg/ha</span>\n                   </div>\n                   <FormControl>\n                      <Slider\n                        value={[field.value]}\n                        onValueChange={(value) => field.onChange(value[0])}\n                        min={CropFormSchemaRanges.potassium.min}\n                        max={CropFormSchemaRanges.potassium.max}\n                        step={1}\n                        aria-label=\"Potassium Slider\"\n                        disabled={isFetchingAnyData}\n                      />\n                   </FormControl>\n                   <div className=\"flex justify-between text-xs text-muted-foreground\">\n                       <span>{CropFormSchemaRanges.potassium.min}</span>\n                       <span>{CropFormSchemaRanges.potassium.max}</span>\n                   </div>\n                   <FormMessage />\n                 </FormItem>\n               )}\n             />\n             <FormField\n               control={form.control}\n               name=\"ph\"\n               render={({ field }) => (\n                 <FormItem>\n                   <div className=\"flex justify-between items-center mb-2\">\n                     <FormLabel className=\"flex items-center gap-2\">\n                       <Beaker className=\"h-5 w-5 text-primary\" /> {/* Icon for pH */}\n                       pH value\n                     </FormLabel>\n                     <span className=\"text-sm font-medium text-primary w-16 text-right\">{phValue.toFixed(2)}</span>\n                   </div>\n                   <FormControl>\n                      <Slider\n                        value={[field.value]}\n                        onValueChange={(value) => field.onChange(value[0])}\n                        min={CropFormSchemaRanges.ph.min}\n                        max={CropFormSchemaRanges.ph.max}\n                        step={0.01}\n                        aria-label=\"pH Slider\"\n                        disabled={isFetchingAnyData}\n                      />\n                   </FormControl>\n                   <div className=\"flex justify-between text-xs text-muted-foreground\">\n                       <span>{CropFormSchemaRanges.ph.min.toFixed(2)}</span>\n                       <span>{CropFormSchemaRanges.ph.max.toFixed(2)}</span>\n                   </div>\n                   <FormMessage />\n                 </FormItem>\n               )}\n             />\n          </CardContent>\n        </Card>\n\n\n        {/* Soil Type & Appearance Section */}\n         <FormField\n          control={form.control}\n          name=\"soilType\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"flex items-center gap-2\">\n                 <ImageIcon className=\"h-5 w-5 text-primary\" />\n                 Soil Type & Appearance (Optional)\n              </FormLabel>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-start\">\n                 <div className=\"md:col-span-2\">\n                   <FormControl>\n                     <Input placeholder=\"e.g., Loam, Clay, Sandy, Dark Brown, Crumbly\" {...field} disabled={isLoading || isFetchingAnyData}/>\n                   </FormControl>\n                   <FormDescription>\n                    Describe the soil type or appearance if known. AI will estimate if left blank.\n                   </FormDescription>\n                   <FormMessage />\n                 </div>\n                 <div className=\"w-full\">\n                    <AspectRatio ratio={4 / 3} className=\"bg-muted/50 rounded-md border border-dashed flex items-center justify-center overflow-hidden\">\n                      <Image\n                          src={`https://picsum.photos/seed/${field.value || 'soil-default'}/400/300`}\n                          alt=\"Soil type placeholder image\"\n                          width={400}\n                          height={300}\n                          className=\"rounded-md object-cover w-full h-full\"\n                          data-ai-hint=\"soil texture close up ground earth\"\n                          key={field.value || 'soil-default'}\n                        />\n                    </AspectRatio>\n                     <p className=\"text-xs text-muted-foreground text-center mt-1\">Soil Visual (Placeholder)</p>\n                  </div>\n              </div>\n            </FormItem>\n          )}\n        />\n\n         {/* Historical Yield and Other Parameters Section */}\n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n              control={form.control}\n              name=\"historicalYieldData\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\">\n                    <BookOpen className=\"h-5 w-5 text-primary\" />\n                    Historical Yield Data (Optional)\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea placeholder=\"e.g., Corn: 5 tons/acre (2023), Soybeans: 2 tons/acre (2022)\" {...field} rows={3} disabled={isLoading || isFetchingAnyData}/>\n                  </FormControl>\n                  <FormDescription>\n                    Provide past yield data if available. AI estimates if blank.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n             <FormField\n              control={form.control}\n              name=\"otherRelevantParameters\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\">\n                     <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-primary\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M12 16v-4\"/><path d=\"M12 8h.01\"/></svg>\n                    Other Relevant Parameters (Optional)\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea placeholder=\"e.g., Water availability, specific pest issues, market prices, nearby industries\" {...field} rows={3} disabled={isLoading || isFetchingAnyData}/>\n                  </FormControl>\n                  <FormDescription>\n                    Include any other factors that might influence crop choice or yield.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n\n        <Button type=\"submit\" disabled={isLoading || isFetchingAnyData} className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground py-3 text-base\">\n          {isLoading ? (\n            <>\n              <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              Predicting...\n            </>\n          ) : isFetchingAnyData ? (\n             <>\n               <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n               {isFetchingLocation ? 'Getting Location...' : isFetchingClimate ? 'Fetching Climate...' : 'Fetching Soil...'}\n             </>\n           ) : (\n            <>\n              <BrainCircuit className=\"mr-2 h-5 w-5\" />\n              Predict Suitable Crops\n            </>\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2607, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 2649, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/chart.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2945, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/prediction-results.tsx"],"sourcesContent":["\nimport Image from \"next/image\";\nimport type { ImproveCropSuggestionsOutput } from \"@/ai/flows/improve-crop-suggestions\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, AlertTriangle, Info, TrendingUp, BarChart2 } from \"lucide-react\"; // Added icons\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\"; // Import AspectRatio\nimport {\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n} from \"@/components/ui/chart\";\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis } from \"recharts\"; // Import chart components\n\ninterface PredictionResultsProps {\n  results: ImproveCropSuggestionsOutput | null;\n  error?: string | null;\n}\n\n// Helper to determine confidence level based on reasons/actions\nconst getConfidenceLevel = (reasons: string[], actions: string[]): 'High' | 'Medium' | 'Low' => {\n  const reasonCount = reasons.length;\n  const actionCount = actions.length;\n\n  if (reasonCount >= 3 && actionCount <= 1) return 'High';\n  if (reasonCount >= 2 && actionCount <= 2) return 'Medium';\n  // Add a condition for very few reasons/many actions being low\n  if (reasonCount < 2 || actionCount >= 3) return 'Low';\n  // Default case or intermediate cases\n  return 'Medium'; // Defaulting to Medium if not clearly High or Low\n}\n\n// Helper to get icon based on confidence\nconst getConfidenceIcon = (level: 'High' | 'Medium' | 'Low') => {\n  switch (level) {\n    case 'High': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n    case 'Medium': return <Info className=\"h-5 w-5 text-yellow-500\" />;\n    case 'Low': return <AlertTriangle className=\"h-5 w-5 text-red-500\" />;\n    default: return null;\n  }\n}\n\n// Placeholder chart data generation\nconst generateChartData = (cropName: string) => {\n  // Simple hash function to get somewhat consistent numbers based on crop name\n  let hash = 0;\n  for (let i = 0; i < cropName.length; i++) {\n    hash = (hash << 5) - hash + cropName.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  const baseYield = 50 + (Math.abs(hash) % 50); // Base yield between 50-100\n  const baseProfit = 1000 + (Math.abs(hash) % 1000); // Base profit between 1000-2000\n\n  return [\n    { metric: \"Est. Yield (units/acre)\", value: baseYield + (Math.random() * 20 - 10) }, // Add some randomness\n    { metric: \"Est. Profit ($/acre)\", value: baseProfit + (Math.random() * 500 - 250) },\n    { metric: \"Water Need (index)\", value: 30 + (Math.abs(hash) % 40) }, // 30-70\n    { metric: \"Nutrient Need (index)\", value: 40 + (Math.abs(hash) % 50) }, // 40-90\n  ];\n};\n\nexport function PredictionResults({ results, error }: PredictionResultsProps) {\n  if (error) {\n    return (\n      <Card className=\"border-destructive bg-destructive/10\">\n        <CardHeader>\n          <CardTitle className=\"text-destructive flex items-center gap-2\">\n             <AlertTriangle className=\"h-5 w-5\" /> Error Generating Predictions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-destructive\">{error}</p>\n           <p className=\"mt-2 text-sm text-muted-foreground\">Please check your input values, especially if using coordinates, or try again later.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!results || results.improvedSuggestions.length === 0) {\n    return (\n       <Card className=\"border-dashed border-muted mt-6\">\n         <CardHeader>\n           <CardTitle className=\"text-muted-foreground\">No Predictions Yet</CardTitle>\n         </CardHeader>\n         <CardContent>\n           <p className=\"text-muted-foreground\">Enter your farm details above and click \"Predict Suitable Crops\" to see AI-powered suggestions.</p>\n         </CardContent>\n       </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 mt-8\"> {/* Increased spacing */}\n       <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n          <TrendingUp className=\"h-6 w-6 text-primary\" />\n          AI Crop Suitability Analysis\n        </h2>\n      {results.improvedSuggestions.map((suggestion, idx) => {\n         const confidence = getConfidenceLevel(suggestion.reasons, suggestion.suggestedActions);\n         const confidenceIcon = getConfidenceIcon(confidence);\n         const chartData = generateChartData(suggestion.crop);\n\n          // Prepare data for simple bar chart (Example: Yield and Profit)\n           const barChartData = chartData.filter(d => d.metric.includes(\"Yield\") || d.metric.includes(\"Profit\"))\n             .map(d => ({ name: d.metric.split(' ')[1], value: Math.round(d.value) }));\n\n\n         return (\n          <Card key={`${suggestion.crop}-${idx}`} className=\"shadow-md hover:shadow-lg transition-shadow duration-200 overflow-hidden\">\n             <div className=\"grid grid-cols-1 md:grid-cols-3\">\n                {/* Image Section */}\n                 <div className=\"md:col-span-1 p-4 md:border-r\">\n                    <AspectRatio ratio={4 / 3} className=\"bg-muted rounded-md overflow-hidden\">\n                       <Image\n                          // Use crop name in seed for varied placeholders\n                          src={`https://picsum.photos/seed/${suggestion.crop.toLowerCase().replace(/\\s+/g, '-')}/400/300`}\n                          alt={`Placeholder image for ${suggestion.crop}`}\n                          width={400}\n                          height={300}\n                          className=\"object-cover w-full h-full\"\n                          data-ai-hint={`${suggestion.crop} field plant`} // AI hint for image generation\n                       />\n                    </AspectRatio>\n                     <p className=\"text-xs text-muted-foreground text-center mt-2\">Visual representation of {suggestion.crop} (Placeholder)</p>\n                 </div>\n\n                 {/* Details Section */}\n                 <div className=\"md:col-span-2\">\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start gap-4\">\n                         <div>\n                          <CardTitle className=\"text-xl\">{suggestion.crop}</CardTitle>\n                          <CardDescription>Potential suitability analysis based on your data.</CardDescription>\n                         </div>\n                         <Badge variant={confidence === 'High' ? 'default' : confidence === 'Medium' ? 'secondary' : 'destructive'} className=\"ml-auto flex items-center gap-1 flex-shrink-0 whitespace-nowrap mt-1\">\n                           {confidenceIcon}\n                           {confidence} Confidence\n                         </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4 pb-4\">\n                      <div>\n                        <h3 className=\"text-md font-semibold mb-1 flex items-center gap-1\"><Info className=\"h-4 w-4 text-blue-500\"/> Reasons for Suggestion:</h3>\n                        {suggestion.reasons.length > 0 ? (\n                            <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground pl-2\">\n                            {suggestion.reasons.map((reason, index) => (\n                                <li key={`reason-${idx}-${index}`}>{reason}</li>\n                            ))}\n                            </ul>\n                        ): (\n                             <p className=\"text-sm text-muted-foreground italic pl-2\">General suitability based on parameters.</p>\n                        )}\n                      </div>\n                      <div>\n                        <h3 className=\"text-md font-semibold mb-1 flex items-center gap-1\"><CheckCircle className=\"h-4 w-4 text-green-600\"/> Suggested Actions to Increase Confidence:</h3>\n                         {suggestion.suggestedActions.length > 0 ? (\n                            <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground pl-2\">\n                            {suggestion.suggestedActions.map((action, index) => (\n                                <li key={`action-${idx}-${index}`}>{action}</li>\n                            ))}\n                            </ul>\n                         ) : (\n                            <p className=\"text-sm text-muted-foreground italic pl-2\">High confidence based on provided data. Consider standard best practices.</p>\n                         )}\n                      </div>\n                    </CardContent>\n                    {/* Chart Section - Placed within the details Card for better layout */}\n                    <CardFooter className=\"flex-col items-start gap-2 pt-4 border-t\">\n                         <h3 className=\"text-md font-semibold flex items-center gap-1\"><BarChart2 className=\"h-4 w-4 text-purple-500\"/> Estimated Metrics (Placeholder):</h3>\n                         <div className=\"w-full h-[100px] text-xs\"> {/* Reduced height */}\n                             <ChartContainer config={{ value: { label: \"Value\", color: \"hsl(var(--primary))\" } }} className=\"h-full w-full\">\n                                <BarChart data={barChartData} margin={{ top: 5, right: 5, left: -25, bottom: 0 }}> {/* Adjusted margins */}\n                                <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                                 <XAxis dataKey=\"name\" tickLine={false} axisLine={false} tickMargin={8} />\n                                 <YAxis tickLine={false} axisLine={false} tickMargin={8} />\n                                 <ChartTooltip\n                                     cursor={false}\n                                     content={<ChartTooltipContent hideLabel />}\n                                    />\n                                <Bar dataKey=\"value\" fill=\"var(--color-value)\" radius={4} />\n                                </BarChart>\n                            </ChartContainer>\n                         </div>\n                         <p className=\"text-xs text-muted-foreground italic w-full text-right\">*Illustrative data based on input parameters.</p>\n                    </CardFooter>\n                 </div>\n            </div>\n          </Card>\n         )\n      })}\n    </div>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3527, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,8OAAC,qKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;AAIf,UAAU,WAAW,GAAG,qKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 3558, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/generate-initial-parameters.ts"],"sourcesContent":["'use server';\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\n// Climate conditions are now provided by user, so removed from input\nconst GenerateInitialParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"near the coast of California\".'),\n  desiredCrops: z.string().describe('A comma-separated list of desired crops, e.g., \"tomatoes, lettuce, strawberries\".'),\n});\nexport type GenerateInitialParametersInput = z.infer<typeof GenerateInitialParametersInputSchema>;\n\n// Climate conditions removed from ou ``tput as well\nconst GenerateInitialParametersOutputSchema = z.object({\n  soilType: z.string().describe('The predicted soil type for the given location.'),\n  // climateConditions removed\n  historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n  otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n});\nexport type GenerateInitialParametersOutput = z.infer<typeof GenerateInitialParametersOutputSchema>;\n\nexport async function generateInitialParameters(input: GenerateInitialParametersInput): Promise<GenerateInitialParametersOutput> {\n  return generateInitialParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  \n  name: 'generateInitialParametersPrompt',\n  input: {\n    schema: z.object({ // Input schema updated\n      locationDescription: z.string().describe('A general description of the location.'),\n      desiredCrops: z.string().describe('A comma-separated list of desired crops.'),\n    }),\n  },\n  output: {\n    schema: z.object({ // Output schema updated\n      soilType: z.string().describe('The predicted soil type for the given location.'),\n      // climateConditions removed\n      historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n      otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n    }),\n  },\n  prompt: `You are an expert agricultural consultant. A user is starting a crop planning application and needs initial parameters for their location and desired crops. The user has already provided climate information separately.\n\n  Based on the following information, provide initial parameters that the user can use. Be as specific as possible.\n\n  Location Description: {{{locationDescription}}}\n  Desired Crops: {{{desiredCrops}}}\n\n  Output the following parameters:\n  - soilType: The predicted soil type for the given location under 100 chaeacters.\n  - historicalYieldData: An estimate of the historical yield data (e.g., tons per acre) for the specified crops in the given location under 100 words.\n  - otherRelevantParameters: generate Any other parameters that might be relevant to crop prediction, such as pest pressure or market demand in the area under 100 words.\n  `,\n});\n\nconst generateInitialParametersFlow = ai.defineFlow<\n  typeof GenerateInitialParametersInputSchema,\n  typeof GenerateInitialParametersOutputSchema\n>(\n  {\n    name: 'generateInitialParametersFlow',\n    inputSchema: GenerateInitialParametersInputSchema,\n    outputSchema: GenerateInitialParametersOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IAqBsB","debugId":null}},
    {"offset": {"line": 3570, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/improve-crop-suggestions.ts"],"sourcesContent":["'use server';\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst ImproveCropSuggestionsInputSchema = z.object({\n  cropSuggestions: z\n    .array(z.string())\n    .describe('An array of suggested crops for the given conditions.'),\n  location: z.string().describe('The location for which the crop suggestions are made.'),\n  soilType: z.string().describe('The general soil type description (e.g., Loam, Clay).'),\n  climateConditions: z.string().describe('A string describing the climate conditions (temp, humidity, rainfall).'),\n  soilConditions: z.string().describe('A string describing detailed soil parameters (N, P, K, pH).'), // Added detailed soil conditions\n  historicalYieldData: z.string().describe('Historical yield data for the location.'),\n  otherRelevantParameters: z.string().optional().describe('Other relevant parameters for crop suggestion.'),\n});\nexport type ImproveCropSuggestionsInput = z.infer<\n  typeof ImproveCropSuggestionsInputSchema\n>;\n\nconst ImproveCropSuggestionsOutputSchema = z.object({\n  improvedSuggestions: z.array(\n    z.object({\n      crop: z.string().describe('The suggested crop.'),\n      reasons: z.array(z.string()).describe('Reasons for suggesting the crop.'),\n      suggestedActions: z\n        .array(z.string())\n        .describe('Suggested actions to increase confidence in the crop.'),\n    })\n  ),\n});\nexport type ImproveCropSuggestionsOutput = z.infer<\n  typeof ImproveCropSuggestionsOutputSchema\n>;\n\nexport async function improveCropSuggestions(\n  input: ImproveCropSuggestionsInput\n): Promise<ImproveCropSuggestionsOutput> {\n  return improveCropSuggestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'improveCropSuggestionsPrompt',\n  input: {\n    schema: z.object({\n      cropSuggestions: z\n        .array(z.string())\n        .describe('An array of suggested crops for the given conditions. If empty or contains \"suggest based on parameters\", suggest suitable crops.'),\n      location: z.string().describe('The location for which the crop suggestions are made.'),\n      soilType: z.string().describe('The general soil type description.'),\n      climateConditions: z.string().describe('A string describing the climate conditions.'),\n      soilConditions: z.string().describe('A string describing detailed soil parameters (N, P, K, pH).'), // Added soil conditions to input schema\n      historicalYieldData: z.string().describe('Historical yield data for the location.'),\n      otherRelevantParameters: z.string().optional().describe('Other relevant parameters for crop suggestion.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      improvedSuggestions: z.array(\n        z.object({\n          crop: z.string().describe('The suggested crop.'),\n          reasons: z.array(z.string()).describe('Reasons for suggesting the crop based on provided parameters.'),\n          suggestedActions: z\n            .array(z.string())\n            .describe('Concrete, actionable steps to increase confidence or optimize for the crop.'),\n        })\n      ),\n    }),\n  },\n  prompt: `You are an expert agricultural consultant providing crop recommendations.\n\nBased on the following farm data, analyze the suitability of the desired crops OR suggest the most suitable crops if none are specified. For each suggested crop (either from the user's list or your own suggestions), provide:\n1. Specific reasons why the crop is suitable (or unsuitable) considering all provided parameters.\n2. Concrete, actionable steps the user can take to increase confidence in this crop's success or to optimize conditions for it (e.g., soil amendments, irrigation adjustments, pest monitoring).\n\nFarm Data:\nLocation: {{{location}}}\nClimate Conditions: {{{climateConditions}}}\nSoil Type: {{{soilType}}}\nDetailed Soil Parameters: {{{soilConditions}}}\nHistorical Yield Data: {{{historicalYieldData}}}\nOther Relevant Parameters: {{{otherRelevantParameters}}}\nDesired Crops: {{#if cropSuggestions}}{{#each cropSuggestions}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}Suggest based on parameters{{/if}}\n\nIf the \"Desired Crops\" list is empty or contains \"suggest based on parameters\", identify 3-5 crops best suited for the given conditions and provide the analysis for them. Otherwise, analyze the crops provided in the list.\n\nFormat the output as a JSON array of objects, where each object has the following keys:\n- crop: The suggested/analyzed crop.\n- reasons: An array of strings explaining the suitability based on the data.\n- suggestedActions: An array of strings listing actionable steps.\n`,\n});\n\nconst improveCropSuggestionsFlow = ai.defineFlow<\n  typeof ImproveCropSuggestionsInputSchema,\n  typeof ImproveCropSuggestionsOutputSchema\n>(\n  {\n    name: 'improveCropSuggestionsFlow',\n    inputSchema: ImproveCropSuggestionsInputSchema,\n    outputSchema: ImproveCropSuggestionsOutputSchema,\n  },\n  async input => {\n    // Handle the case where \"suggest based on parameters\" is the only item\n    if (input.cropSuggestions.length === 1 && input.cropSuggestions[0] === \"suggest based on parameters\") {\n        input.cropSuggestions = []; // Clear the array so the prompt knows to suggest\n    }\n\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IAkCsB","debugId":null}},
    {"offset": {"line": 3582, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport type * as z from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { CropForm } from \"@/components/crop-form\";\nimport { PredictionResults } from \"@/components/prediction-results\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { generateInitialParameters, type GenerateInitialParametersInput, type GenerateInitialParametersOutput } from \"@/ai/flows/generate-initial-parameters\";\nimport { improveCropSuggestions, type ImproveCropSuggestionsInput, type ImproveCropSuggestionsOutput } from \"@/ai/flows/improve-crop-suggestions\";\nimport { CropFormSchema, type CropFormData } from \"@/schemas/crop-form-schema\";\nimport { Leaf, AlertCircle, Loader2, LocateFixed, RefreshCw } from \"lucide-react\"; // Ensure LocateFixed and RefreshCw are imported\n\n\nexport default function Home() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [predictionResults, setPredictionResults] = useState<ImproveCropSuggestionsOutput | null>(null);\n  const [formError, setFormError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<CropFormData>({\n    resolver: zodResolver(CropFormSchema),\n    defaultValues: {\n      location: \"\",\n      desiredCrops: \"\",\n      soilType: \"\", \n      temperature: 25,\n      humidity: 70,\n      rainfall: 100,\n      \n      nitrogen: 50,\n      phosphorus: 82,\n      potassium: 50,\n      ph: 6.60,\n      historicalYieldData: \"\",\n      otherParameters: \"\",\n      otherRelevantParameters: \"\",\n    },\n  });\n\n  const handleFormSubmit = async (values: CropFormData) => {\n    setIsLoading(true);\n    setFormError(null);\n    setPredictionResults(null);\n\n     if (!values.location || values.location.trim().length < 3) {\n         setFormError(\"Please provide a valid location (at least 3 characters).\");\n         toast({\n           title: \"Input Error\",\n           description: \"Location is required.\",\n           variant: \"destructive\",\n         });\n         setIsLoading(false);\n         return;\n     }\n\n     // Combine all parameters into a single string for the AI (or pass structured if API supports)\n     const climateConditionsString = `Avg Temp: ${values.temperature}°C, Avg Humidity: ${values.humidity}%, Avg Rainfall: ${values.rainfall}mm/month`;\n     const soilConditionsString = `N: ${values.nitrogen} kg/ha, P: ${values.phosphorus} kg/ha, K: ${values.potassium} kg/ha, pH: ${values.ph.toFixed(2)}, Soil Type: ${values.soilType || 'Not specified'}`;\n\n\n    try {\n      let initialParams: GenerateInitialParametersOutput | null = null;\n      // Adjust condition if AI should also fill nutrient values\n      const needsInitialParams = !values.soilType || !values.historicalYieldData || !values.otherRelevantParameters;\n      let fieldsUpdated = false;\n\n      if (needsInitialParams) {\n        const initialParamsInput: GenerateInitialParametersInput = {\n          locationDescription: values.location,\n          desiredCrops: values.desiredCrops || \"common crops for the area\",\n        };\n        toast({\n          title: \"Estimating Missing Details...\",\n          description: \"Using AI to fill in blanks for general soil type and yield based on location.\",\n        });\n        initialParams = await generateInitialParameters(initialParamsInput);\n\n        if (!values.soilType && initialParams.soilType) {\n          form.setValue('soilType', initialParams.soilType, { shouldValidate: true });\n          fieldsUpdated = true;\n        }\n        if (!values.historicalYieldData && initialParams.historicalYieldData) {\n           form.setValue('historicalYieldData', initialParams.historicalYieldData, { shouldValidate: true });\n           fieldsUpdated = true;\n        }\n        if (!values.otherRelevantParameters && initialParams.otherRelevantParameters) {\n          form.setValue('otherRelevantParameters', initialParams.otherRelevantParameters, { shouldValidate: true });\n          fieldsUpdated = true;\n       }\n\n        toast({\n           title: \"Farm Details Estimated\",\n           description: `AI provided estimates for missing parameters.${fieldsUpdated ? ' Form fields updated.' : ''}`,\n           variant: \"default\",\n         });\n      }\n\n       // Use form.getValues() to get potentially updated values from AI fills or user edits\n       const currentFormValues = form.getValues();\n       const currentClimateString = `Avg Temp: ${currentFormValues.temperature}°C, Avg Humidity: ${currentFormValues.humidity}%, Avg Rainfall: ${currentFormValues.rainfall}mm/month`;\n       const currentSoilString = `N: ${currentFormValues.nitrogen} kg/ha, P: ${currentFormValues.phosphorus} kg/ha, K: ${currentFormValues.potassium} kg/ha, pH: ${currentFormValues.ph.toFixed(2)}, Soil Type: ${currentFormValues.soilType || initialParams?.soilType || 'Not specified'}`;\n\n\n       const improveInput: ImproveCropSuggestionsInput = {\n         cropSuggestions: currentFormValues.desiredCrops ? currentFormValues.desiredCrops.split(',').map(s => s.trim()).filter(s => s) : [],\n         location: currentFormValues.location,\n         soilType: currentFormValues.soilType || initialParams?.soilType || \"Not Specified\", // General soil type\n         // Pass both climate and detailed soil strings\n         climateConditions: currentClimateString,\n         soilConditions: currentSoilString, // Add the new soil conditions string\n         historicalYieldData: currentFormValues.historicalYieldData || initialParams?.historicalYieldData || \"Not Specified\",\n         otherRelevantParameters: currentFormValues.otherRelevantParameters || initialParams?.otherRelevantParameters || \"Not Specified\",\n       };\n\n\n       if (improveInput.cropSuggestions.length === 0) {\n            toast({\n              title: \"Finding Suitable Crops...\",\n              description: \"No specific crops desired, AI will suggest based on location data.\",\n            });\n             improveInput.cropSuggestions = [\"suggest based on parameters\"];\n       } else {\n           toast({\n                title: \"Analyzing Your Choices...\",\n                description: \"Evaluating desired crops and suggesting others.\",\n              });\n       }\n\n      const results = await improveCropSuggestions(improveInput);\n\n       // Filter out placeholder suggestion if present\n       results.improvedSuggestions = results.improvedSuggestions.filter(s => s.crop !== \"suggest based on parameters\");\n\n\n      setPredictionResults(results);\n\n      if (results.improvedSuggestions.length > 0) {\n        toast({\n            title: \"Analysis Complete!\",\n            description: \"Crop suggestions and insights are ready below.\",\n            variant: \"default\",\n        });\n      } else {\n         toast({\n              title: \"Analysis Complete\",\n              description: \"No specific crop suggestions generated based on the input. Review parameters.\",\n              variant: \"default\",\n            });\n      }\n\n    } catch (err: any) {\n      console.error(\"Prediction process failed:\", err);\n      const specificError = err.details || err.message || \"An unexpected error occurred during AI processing.\";\n      const userMessage = `Failed to generate predictions. ${specificError.length < 100 ? specificError : 'Please check console for details.'}`;\n      setFormError(userMessage);\n      toast({\n        title: \"Prediction Error\",\n        description: userMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"container mx-auto p-4 md:p-8 lg:max-w-6xl\">\n       <header className=\"flex flex-col sm:flex-row items-center justify-between gap-3 mb-8 border-b pb-4\">\n          <div className=\"flex items-center gap-3\">\n             <Leaf className=\"h-10 w-10 text-primary\" />\n             <div>\n                <h1 className=\"text-3xl font-bold text-primary\">CropWise</h1>\n                <p className=\"text-muted-foreground\">AI-Powered Crop Suitability & Planning</p>\n             </div>\n          </div>\n       </header>\n\n      <div className=\"grid grid-cols-1 gap-10\">\n         <Card className=\"shadow-lg border border-primary/20\">\n           <CardHeader>\n             <CardTitle className=\"text-2xl\">Farm & Location Data</CardTitle>\n             <CardDescription>\n               Enter details about your farm. Use sliders for environmental and soil parameters. AI can estimate soil type and historical yield if left blank. Use <LocateFixed className=\"inline h-3 w-3 align-text-bottom\"/> for current location and <RefreshCw className=\"inline h-3 w-3 align-text-bottom\"/> to fetch data.\n             </CardDescription>\n           </CardHeader>\n           <CardContent>\n            {formError && (\n               <div className=\"mb-4 p-3 bg-destructive/10 border border-destructive text-destructive rounded-md flex items-center gap-2 text-sm\">\n                   <AlertCircle className=\"h-4 w-4\"/>\n                   {formError}\n               </div>\n            )}\n            <CropForm form={form} onSubmit={handleFormSubmit} isLoading={isLoading} />\n           </CardContent>\n         </Card>\n\n         <Separator />\n\n         {isLoading && (\n            <div className=\"text-center py-10\">\n                <Loader2 className=\"h-8 w-8 animate-spin mx-auto text-primary mb-2\"/>\n                <p className=\"text-muted-foreground\">Analyzing data and generating predictions...</p>\n            </div>\n         )}\n\n         {!isLoading && (predictionResults || formError) && (\n             <PredictionResults results={predictionResults} error={formError} />\n         )}\n\n         {!isLoading && !predictionResults && !formError && (\n             <Card className=\"border-dashed border-muted mt-6 bg-background/50\">\n               <CardHeader>\n                 <CardTitle className=\"text-muted-foreground font-normal\">Prediction Area</CardTitle>\n               </CardHeader>\n               <CardContent className=\"text-center py-10\">\n                 <p className=\"text-muted-foreground\">Enter your farm details above and click \"Predict Suitable Crops\" to get AI-driven insights.</p>\n               </CardContent>\n             </Card>\n         )}\n\n\n       </div>\n\n       <footer className=\"mt-16 text-center text-sm text-muted-foreground border-t pt-6\">\n           Team : Tech Tritan \n       </footer>\n    </main>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}