{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-initial-parameters.ts"],"sourcesContent":["\n// Use server directive.\n'use server';\n\n/**\n * @fileOverview Provides initial crop parameters based on a general location description and desired crops.\n *\n * - generateInitialParameters - A function that generates initial parameters for crop prediction.\n * - GenerateInitialParametersInput - The input type for the generateInitialParameters function.\n * - GenerateInitialParametersOutput - The return type for the generateInitialParameters function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\n// Climate conditions are now provided by user, so removed from input\nconst GenerateInitialParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"near the coast of California\".'),\n  desiredCrops: z.string().describe('A comma-separated list of desired crops, e.g., \"tomatoes, lettuce, strawberries\".'),\n});\nexport type GenerateInitialParametersInput = z.infer<typeof GenerateInitialParametersInputSchema>;\n\n// Climate conditions removed from output as well\nconst GenerateInitialParametersOutputSchema = z.object({\n  soilType: z.string().describe('The predicted soil type for the given location.'),\n  // climateConditions removed\n  historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n  otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n});\nexport type GenerateInitialParametersOutput = z.infer<typeof GenerateInitialParametersOutputSchema>;\n\nexport async function generateInitialParameters(input: GenerateInitialParametersInput): Promise<GenerateInitialParametersOutput> {\n  return generateInitialParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateInitialParametersPrompt',\n  input: {\n    schema: z.object({ // Input schema updated\n      locationDescription: z.string().describe('A general description of the location.'),\n      desiredCrops: z.string().describe('A comma-separated list of desired crops.'),\n    }),\n  },\n  output: {\n    schema: z.object({ // Output schema updated\n      soilType: z.string().describe('The predicted soil type for the given location.'),\n      // climateConditions removed\n      historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n      otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n    }),\n  },\n  prompt: `You are an expert agricultural consultant. A user is starting a crop planning application and needs initial parameters for their location and desired crops. The user has already provided climate information separately.\n\n  Based on the following information, provide initial parameters that the user can use. Be as specific as possible.\n\n  Location Description: {{{locationDescription}}}\n  Desired Crops: {{{desiredCrops}}}\n\n  Output the following parameters:\n  - soilType: The predicted soil type for the given location.\n  - historicalYieldData: An estimate of the historical yield data (e.g., tons per acre) for the specified crops in the given location.\n  - otherRelevantParameters: Any other parameters that might be relevant to crop prediction, such as pest pressure or market demand in the area.\n  `,\n});\n\nconst generateInitialParametersFlow = ai.defineFlow<\n  typeof GenerateInitialParametersInputSchema,\n  typeof GenerateInitialParametersOutputSchema\n>(\n  {\n    name: 'generateInitialParametersFlow',\n    inputSchema: GenerateInitialParametersInputSchema,\n    outputSchema: GenerateInitialParametersOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AACA,wBAAwB;;;;;;AAGxB;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,qEAAqE;AACrE,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,iDAAiD;AACjD,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,4BAA4B;IAC5B,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/C;AAGO,eAAe,uCAAuB,GAAvB,0BAA0B,KAAqC;IACnF,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACzC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACpC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,4BAA4B;YAC5B,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACzC,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC/C;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;EAWT,CAAC;AACH;AAEA,MAAM,gCAAgC,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/improve-crop-suggestions.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Flow to improve crop suggestions by providing reasons and actions.\n *\n * - improveCropSuggestions - A function that takes crop suggestions and provides reasons and actions to increase confidence.\n * - ImproveCropSuggestionsInput - The input type for the improveCropSuggestions function.\n * - ImproveCropSuggestionsOutput - The return type for the improveCropSuggestions function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst ImproveCropSuggestionsInputSchema = z.object({\n  cropSuggestions: z\n    .array(z.string())\n    .describe('An array of suggested crops for the given conditions.'),\n  location: z.string().describe('The location for which the crop suggestions are made.'),\n  soilType: z.string().describe('The soil type of the location.'),\n  climateConditions: z.string().describe('The climate conditions of the location.'),\n  historicalYieldData: z.string().describe('Historical yield data for the location.'),\n});\nexport type ImproveCropSuggestionsInput = z.infer<\n  typeof ImproveCropSuggestionsInputSchema\n>;\n\nconst ImproveCropSuggestionsOutputSchema = z.object({\n  improvedSuggestions: z.array(\n    z.object({\n      crop: z.string().describe('The suggested crop.'),\n      reasons: z.array(z.string()).describe('Reasons for suggesting the crop.'),\n      suggestedActions: z\n        .array(z.string())\n        .describe('Suggested actions to increase confidence in the crop.'),\n    })\n  ),\n});\nexport type ImproveCropSuggestionsOutput = z.infer<\n  typeof ImproveCropSuggestionsOutputSchema\n>;\n\nexport async function improveCropSuggestions(\n  input: ImproveCropSuggestionsInput\n): Promise<ImproveCropSuggestionsOutput> {\n  return improveCropSuggestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'improveCropSuggestionsPrompt',\n  input: {\n    schema: z.object({\n      cropSuggestions: z\n        .array(z.string())\n        .describe('An array of suggested crops for the given conditions.'),\n      location: z.string().describe('The location for which the crop suggestions are made.'),\n      soilType: z.string().describe('The soil type of the location.'),\n      climateConditions: z.string().describe('The climate conditions of the location.'),\n      historicalYieldData: z.string().describe('Historical yield data for the location.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      improvedSuggestions: z.array(\n        z.object({\n          crop: z.string().describe('The suggested crop.'),\n          reasons: z.array(z.string()).describe('Reasons for suggesting the crop.'),\n          suggestedActions: z\n            .array(z.string())\n            .describe('Suggested actions to increase confidence in the crop.'),\n        })\n      ),\n    }),\n  },\n  prompt: `For the following crop suggestions, provide reasons for the suggestions and suggested actions to increase confidence in the crop. Consider the location, soil type, climate conditions and historical yield data.\n\nCrop Suggestions: {{{cropSuggestions}}}\nLocation: {{{location}}}\nSoil Type: {{{soilType}}}\nClimate Conditions: {{{climateConditions}}}\nHistorical Yield Data: {{{historicalYieldData}}}\n\nFormat the output as a JSON array of objects, where each object has the following keys:\n- crop: The suggested crop.\n- reasons: An array of reasons for suggesting the crop.\n- suggestedActions: An array of suggested actions to increase confidence in the crop.\n\nMake sure that the suggested actions are concrete and actionable.\n`,\n});\n\nconst improveCropSuggestionsFlow = ai.defineFlow<\n  typeof ImproveCropSuggestionsInputSchema,\n  typeof ImproveCropSuggestionsOutputSchema\n>(\n  {\n    name: 'improveCropSuggestionsFlow',\n    inputSchema: ImproveCropSuggestionsInputSchema,\n    outputSchema: ImproveCropSuggestionsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,iBAAiB,uIAAA,CAAA,IAAC,CACf,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACvC,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC3C;AAKA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,qBAAqB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAC1B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;QACtC,kBAAkB,uIAAA,CAAA,IAAC,CAChB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACd;AAEJ;AAKO,eAAe,uCAAoB,GAApB,uBACpB,KAAkC;IAElC,OAAO,2BAA2B;AACpC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,iBAAiB,uIAAA,CAAA,IAAC,CACf,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;YACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACvC,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3C;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAC1B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;gBACP,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;gBAC1B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;gBACtC,kBAAkB,uIAAA,CAAA,IAAC,CAChB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;YACd;QAEJ;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;;;;AAcX,CAAC;AACD;AAEA,MAAM,6BAA6B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAI9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA7DoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/reverse-geocode.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Provides reverse geocoding functionality.\n *\n * - reverseGeocode - A function that takes latitude and longitude and returns a location description.\n * - ReverseGeocodeInput - The input type for the reverseGeocode function.\n * - ReverseGeocodeOutput - The return type for the reverseGeocode function.\n */\n\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst ReverseGeocodeInputSchema = z.object({\n  latitude: z.number().describe('The latitude coordinate.'),\n  longitude: z.number().describe('The longitude coordinate.'),\n});\nexport type ReverseGeocodeInput = z.infer<typeof ReverseGeocodeInputSchema>;\n\nconst ReverseGeocodeOutputSchema = z.object({\n  locationDescription: z\n    .string()\n    .describe('A general description of the location based on the coordinates, e.g., \"near Sacramento, California, USA\". Include city, state/region, and country if possible.'),\n});\nexport type ReverseGeocodeOutput = z.infer<typeof ReverseGeocodeOutputSchema>;\n\nexport async function reverseGeocode(input: ReverseGeocodeInput): Promise<ReverseGeocodeOutput> {\n  return reverseGeocodeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'reverseGeocodePrompt',\n  input: {\n    schema: z.object({\n      latitude: z.number().describe('The latitude.'),\n      longitude: z.number().describe('The longitude.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      locationDescription: z\n        .string()\n        .describe('A general description of the location, including city, state/region, and country.'),\n    }),\n  },\n  prompt: `Based on the provided latitude and longitude coordinates, describe the general location. Include the city, state/region, and country if possible. Be concise.\n\nLatitude: {{{latitude}}}\nLongitude: {{{longitude}}}\n`,\n});\n\nconst reverseGeocodeFlow = ai.defineFlow<\n  typeof ReverseGeocodeInputSchema,\n  typeof ReverseGeocodeOutputSchema\n>(\n  {\n    name: 'reverseGeocodeFlow',\n    inputSchema: ReverseGeocodeInputSchema,\n    outputSchema: ReverseGeocodeOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,qBAAqB,uIAAA,CAAA,IAAC,CACnB,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,uCAAY,GAAZ,eAAe,KAA0B;IAC7D,OAAO,mBAAmB;AAC5B;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CACnB,MAAM,GACN,QAAQ,CAAC;QACd;IACF;IACA,QAAQ,CAAC;;;;AAIX,CAAC;AACD;AAEA,MAAM,qBAAqB,2HAAA,CAAA,KAAE,CAAC,UAAU,CAItC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;;;IAtCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/get-climate-parameters.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Provides estimated climate parameters based on a location description.\n *\n * - getClimateParameters - Fetches typical temperature, humidity, and rainfall for a location.\n * - GetClimateParametersInput - Input schema for the flow.\n * - GetClimateParametersOutput - Output schema for the flow.\n */\n\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst GetClimateParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"Central Valley, California\" or \"Jharkhand, India\".'),\n});\nexport type GetClimateParametersInput = z.infer<typeof GetClimateParametersInputSchema>;\n\nconst GetClimateParametersOutputSchema = z.object({\n  averageTemperatureC: z.number().describe('Estimated average yearly temperature in Celsius for the location.'),\n  averageHumidityPercent: z.number().describe('Estimated average yearly relative humidity percentage for the location.'),\n  averageMonthlyRainfallMM: z.number().describe('Estimated average monthly rainfall in millimeters for the location.'),\n});\nexport type GetClimateParametersOutput = z.infer<typeof GetClimateParametersOutputSchema>;\n\nexport async function getClimateParameters(input: GetClimateParametersInput): Promise<GetClimateParametersOutput> {\n  return getClimateParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'getClimateParametersPrompt',\n  input: {\n    schema: z.object({\n      locationDescription: z.string().describe('The location description.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      averageTemperatureC: z.number().describe('Estimated average yearly temperature in Celsius.'),\n      averageHumidityPercent: z.number().describe('Estimated average yearly relative humidity percentage (0-100).'),\n      averageMonthlyRainfallMM: z.number().describe('Estimated average monthly rainfall in millimeters.'),\n    }),\n  },\n  prompt: `You are an agricultural climate data provider. Based on the provided location description, estimate the typical average environmental parameters. Provide numerical estimates only.\n\nLocation Description: {{{locationDescription}}}\n\nEstimate the following average values for this location:\n- averageTemperatureC: Average yearly temperature in Celsius.\n- averageHumidityPercent: Average yearly relative humidity percentage (0-100).\n- averageMonthlyRainfallMM: Average monthly rainfall in millimeters.\n\nReturn only the numerical estimates in the specified JSON format. Ensure humidity is between 0 and 100.\n`,\n});\n\nconst getClimateParametersFlow = ai.defineFlow<\n  typeof GetClimateParametersInputSchema,\n  typeof GetClimateParametersOutputSchema\n>(\n  {\n    name: 'getClimateParametersFlow',\n    inputSchema: GetClimateParametersInputSchema,\n    outputSchema: GetClimateParametersOutputSchema,\n  },\n  async (input) => {\n    try {\n        const { output } = await prompt(input);\n\n        // Basic validation/clamping for humidity\n        if (output && output.averageHumidityPercent) {\n            output.averageHumidityPercent = Math.max(0, Math.min(100, output.averageHumidityPercent));\n        }\n        // Basic validation/clamping for rainfall\n        if (output && output.averageMonthlyRainfallMM < 0) {\n            output.averageMonthlyRainfallMM = 0;\n        }\n        // Optional: Add similar validation for temperature if needed\n\n        return output!;\n    } catch (error: any) {\n        // Log specific rate limit errors for debugging\n        if (error.message?.includes(\"429\") || error.details?.includes(\"429\")) {\n            console.error(`RATE LIMIT HIT: getClimateParameters for location \"${input.locationDescription}\". Error details:`, error.details || error.message);\n        } else {\n            console.error(`Error in getClimateParametersFlow for location \"${input.locationDescription}\":`, error);\n        }\n        // Re-throw the error to be handled by the calling component\n        throw error;\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC3C;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5C,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChD;AAGO,eAAe,uCAAkB,GAAlB,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3C;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACzC,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC5C,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChD;IACF;IACA,QAAQ,CAAC;;;;;;;;;;AAUX,CAAC;AACD;AAEA,MAAM,2BAA2B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAI5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI;QACA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;QAEhC,yCAAyC;QACzC,IAAI,UAAU,OAAO,sBAAsB,EAAE;YACzC,OAAO,sBAAsB,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,OAAO,sBAAsB;QAC3F;QACA,yCAAyC;QACzC,IAAI,UAAU,OAAO,wBAAwB,GAAG,GAAG;YAC/C,OAAO,wBAAwB,GAAG;QACtC;QACA,6DAA6D;QAE7D,OAAO;IACX,EAAE,OAAO,OAAY;QACjB,+CAA+C;QAC/C,IAAI,MAAM,OAAO,EAAE,SAAS,UAAU,MAAM,OAAO,EAAE,SAAS,QAAQ;YAClE,QAAQ,KAAK,CAAC,CAAC,mDAAmD,EAAE,MAAM,mBAAmB,CAAC,iBAAiB,CAAC,EAAE,MAAM,OAAO,IAAI,MAAM,OAAO;QACpJ,OAAO;YACH,QAAQ,KAAK,CAAC,CAAC,gDAAgD,EAAE,MAAM,mBAAmB,CAAC,EAAE,CAAC,EAAE;QACpG;QACA,4DAA4D;QAC5D,MAAM;IACV;AACF;;;IAjEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 575, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 641, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 655, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 669, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}