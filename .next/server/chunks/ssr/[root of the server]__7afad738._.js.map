{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/generate-initial-parameters.ts"],"sourcesContent":["'use server';\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\n// Climate conditions are now provided by user, so removed from input\nconst GenerateInitialParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"near the coast of California\".'),\n  desiredCrops: z.string().describe('A comma-separated list of desired crops, e.g., \"tomatoes, lettuce, strawberries\".'),\n});\nexport type GenerateInitialParametersInput = z.infer<typeof GenerateInitialParametersInputSchema>;\n\n// Climate conditions removed from ou ``tput as well\nconst GenerateInitialParametersOutputSchema = z.object({\n  soilType: z.string().describe('The predicted soil type for the given location.'),\n  // climateConditions removed\n  historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n  otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n});\nexport type GenerateInitialParametersOutput = z.infer<typeof GenerateInitialParametersOutputSchema>;\n\nexport async function generateInitialParameters(input: GenerateInitialParametersInput): Promise<GenerateInitialParametersOutput> {\n  return generateInitialParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  \n  name: 'generateInitialParametersPrompt',\n  input: {\n    schema: z.object({ // Input schema updated\n      locationDescription: z.string().describe('A general description of the location.'),\n      desiredCrops: z.string().describe('A comma-separated list of desired crops.'),\n    }),\n  },\n  output: {\n    schema: z.object({ // Output schema updated\n      soilType: z.string().describe('The predicted soil type for the given location.'),\n      // climateConditions removed\n      historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n      otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n    }),\n  },\n  prompt: `You are an expert agricultural consultant. A user is starting a crop planning application and needs initial parameters for their location and desired crops. The user has already provided climate information separately.\n\n  Based on the following information, provide initial parameters that the user can use. Be as specific as possible.\n\n  Location Description: {{{locationDescription}}}\n  Desired Crops: {{{desiredCrops}}}\n\n  Output the following parameters:\n  - soilType: The predicted soil type for the given location under 100 chaeacters.\n  - historicalYieldData: An estimate of the historical yield data (e.g., tons per acre) for the specified crops in the given location under 100 words.\n  - otherRelevantParameters: generate Any other parameters that might be relevant to crop prediction, such as pest pressure or market demand in the area under 100 words.\n  `,\n});\n\nconst generateInitialParametersFlow = ai.defineFlow<\n  typeof GenerateInitialParametersInputSchema,\n  typeof GenerateInitialParametersOutputSchema\n>(\n  {\n    name: 'generateInitialParametersFlow',\n    inputSchema: GenerateInitialParametersInputSchema,\n    outputSchema: GenerateInitialParametersOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;;;;;;AAEA,qEAAqE;AACrE,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,oDAAoD;AACpD,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,4BAA4B;IAC5B,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/C;AAGO,eAAe,uCAAuB,GAAvB,0BAA0B,KAAqC;IACnF,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAE7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACzC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACpC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,4BAA4B;YAC5B,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACzC,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC/C;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;EAWT,CAAC;AACH;AAEA,MAAM,gCAAgC,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA/CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/improve-crop-suggestions.ts"],"sourcesContent":["'use server';\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst ImproveCropSuggestionsInputSchema = z.object({\n  cropSuggestions: z\n    .array(z.string())\n    .describe('An array of suggested crops for the given conditions.'),\n  location: z.string().describe('The location for which the crop suggestions are made.'),\n  soilType: z.string().describe('The general soil type description (e.g., Loam, Clay).'),\n  climateConditions: z.string().describe('A string describing the climate conditions (temp, humidity, rainfall).'),\n  soilConditions: z.string().describe('A string describing detailed soil parameters (N, P, K, pH).'), // Added detailed soil conditions\n  historicalYieldData: z.string().describe('Historical yield data for the location.'),\n  otherRelevantParameters: z.string().optional().describe('Other relevant parameters for crop suggestion.'),\n});\nexport type ImproveCropSuggestionsInput = z.infer<\n  typeof ImproveCropSuggestionsInputSchema\n>;\n\nconst ImproveCropSuggestionsOutputSchema = z.object({\n  improvedSuggestions: z.array(\n    z.object({\n      crop: z.string().describe('The suggested crop.'),\n      reasons: z.array(z.string()).describe('Reasons for suggesting the crop.'),\n      suggestedActions: z\n        .array(z.string())\n        .describe('Suggested actions to increase confidence in the crop.'),\n    })\n  ),\n});\nexport type ImproveCropSuggestionsOutput = z.infer<\n  typeof ImproveCropSuggestionsOutputSchema\n>;\n\nexport async function improveCropSuggestions(\n  input: ImproveCropSuggestionsInput\n): Promise<ImproveCropSuggestionsOutput> {\n  return improveCropSuggestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'improveCropSuggestionsPrompt',\n  input: {\n    schema: z.object({\n      cropSuggestions: z\n        .array(z.string())\n        .describe('An array of suggested crops for the given conditions. If empty or contains \"suggest based on parameters\", suggest suitable crops.'),\n      location: z.string().describe('The location for which the crop suggestions are made.'),\n      soilType: z.string().describe('The general soil type description.'),\n      climateConditions: z.string().describe('A string describing the climate conditions.'),\n      soilConditions: z.string().describe('A string describing detailed soil parameters (N, P, K, pH).'), // Added soil conditions to input schema\n      historicalYieldData: z.string().describe('Historical yield data for the location.'),\n      otherRelevantParameters: z.string().optional().describe('Other relevant parameters for crop suggestion.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      improvedSuggestions: z.array(\n        z.object({\n          crop: z.string().describe('The suggested crop.'),\n          reasons: z.array(z.string()).describe('Reasons for suggesting the crop based on provided parameters.'),\n          suggestedActions: z\n            .array(z.string())\n            .describe('Concrete, actionable steps to increase confidence or optimize for the crop.'),\n        })\n      ),\n    }),\n  },\n  prompt: `You are an expert agricultural consultant providing crop recommendations.\n\nBased on the following farm data, analyze the suitability of the desired crops OR suggest the most suitable crops if none are specified. For each suggested crop (either from the user's list or your own suggestions), provide:\n1. Specific reasons why the crop is suitable (or unsuitable) considering all provided parameters.\n2. Concrete, actionable steps the user can take to increase confidence in this crop's success or to optimize conditions for it (e.g., soil amendments, irrigation adjustments, pest monitoring).\n\nFarm Data:\nLocation: {{{location}}}\nClimate Conditions: {{{climateConditions}}}\nSoil Type: {{{soilType}}}\nDetailed Soil Parameters: {{{soilConditions}}}\nHistorical Yield Data: {{{historicalYieldData}}}\nOther Relevant Parameters: {{{otherRelevantParameters}}}\nDesired Crops: {{#if cropSuggestions}}{{#each cropSuggestions}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}Suggest based on parameters{{/if}}\n\nIf the \"Desired Crops\" list is empty or contains \"suggest based on parameters\", identify 3-5 crops best suited for the given conditions and provide the analysis for them. Otherwise, analyze the crops provided in the list.\n\nFormat the output as a JSON array of objects, where each object has the following keys:\n- crop: The suggested/analyzed crop.\n- reasons: An array of strings explaining the suitability based on the data.\n- suggestedActions: An array of strings listing actionable steps.\n`,\n});\n\nconst improveCropSuggestionsFlow = ai.defineFlow<\n  typeof ImproveCropSuggestionsInputSchema,\n  typeof ImproveCropSuggestionsOutputSchema\n>(\n  {\n    name: 'improveCropSuggestionsFlow',\n    inputSchema: ImproveCropSuggestionsInputSchema,\n    outputSchema: ImproveCropSuggestionsOutputSchema,\n  },\n  async input => {\n    // Handle the case where \"suggest based on parameters\" is the only item\n    if (input.cropSuggestions.length === 1 && input.cropSuggestions[0] === \"suggest based on parameters\") {\n        input.cropSuggestions = []; // Clear the array so the prompt knows to suggest\n    }\n\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/reverse-geocode.ts"],"sourcesContent":["'use server';\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst ReverseGeocodeInputSchema = z.object({\n  latitude: z.number().describe('The latitude coordinate.'),\n  longitude: z.number().describe('The longitude coordinate.'),\n});\nexport type ReverseGeocodeInput = z.infer<typeof ReverseGeocodeInputSchema>;\n\nconst ReverseGeocodeOutputSchema = z.object({\n  locationDescription: z\n    .string()\n    .describe('A general description of the location based on the coordinates, e.g., \"near Sacramento, California, USA\". Include city, state/region, and country if possible.'),\n});\nexport type ReverseGeocodeOutput = z.infer<typeof ReverseGeocodeOutputSchema>;\n\nexport async function reverseGeocode(input: ReverseGeocodeInput): Promise<ReverseGeocodeOutput> {\n  return reverseGeocodeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'reverseGeocodePrompt',\n  input: {\n    schema: z.object({\n      latitude: z.number().describe('The latitude.'),\n      longitude: z.number().describe('The longitude.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      locationDescription: z\n        .string()\n        .describe('A general description of the location, including city, state/region, and country.'),\n    }),\n  },\n  prompt: `Based on the provided latitude and longitude coordinates, describe the general location. Include the city, state/region, and country if possible. Be concise.\n\nLatitude: {{{latitude}}}\nLongitude: {{{longitude}}}\n`,\n});\n\nconst reverseGeocodeFlow = ai.defineFlow<\n  typeof ReverseGeocodeInputSchema,\n  typeof ReverseGeocodeOutputSchema\n>(\n  {\n    name: 'reverseGeocodeFlow',\n    inputSchema: ReverseGeocodeInputSchema,\n    outputSchema: ReverseGeocodeOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n\n// FORWARD GEOCODING: Location name to coordinates\nexport interface GeocodeInput {\n  location: string;\n}\nexport interface GeocodeOutput {\n  latitude: number;\n  longitude: number;\n  displayName: string;\n}\n\n/**\n * Uses OpenStreetMap Nominatim API to geocode a location name to coordinates.\n */\nexport async function geocode(input: GeocodeInput): Promise<GeocodeOutput | null> {\n  const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(input.location)}`;\n  const res = await fetch(url, {\n    headers: {\n      'User-Agent': 'CropPredictionApp/1.0 (your@email.com)',\n      'Accept-Language': 'en',\n    },\n  });\n  if (!res.ok) return null;\n  const data = await res.json();\n  if (!Array.isArray(data) || data.length === 0) return null;\n  const best = data[0];\n  return {\n    latitude: parseFloat(best.lat),\n    longitude: parseFloat(best.lon),\n    displayName: best.display_name,\n  };\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;AAAA;;;;;;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,qBAAqB,uIAAA,CAAA,IAAC,CACnB,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,uCAAY,GAAZ,eAAe,KAA0B;IAC7D,OAAO,mBAAmB;AAC5B;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CACnB,MAAM,GACN,QAAQ,CAAC;QACd;IACF;IACA,QAAQ,CAAC;;;;AAIX,CAAC;AACD;AAEA,MAAM,qBAAqB,2HAAA,CAAA,KAAE,CAAC,UAAU,CAItC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;AAgBK,eAAe,uCAAK,GAAL,QAAQ,KAAmB;IAC/C,MAAM,MAAM,CAAC,yDAAyD,EAAE,mBAAmB,MAAM,QAAQ,GAAG;IAC5G,MAAM,MAAM,MAAM,MAAM,KAAK;QAC3B,SAAS;YACP,cAAc;YACd,mBAAmB;QACrB;IACF;IACA,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO;IACpB,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,IAAI,CAAC,MAAM,OAAO,CAAC,SAAS,KAAK,MAAM,KAAK,GAAG,OAAO;IACtD,MAAM,OAAO,IAAI,CAAC,EAAE;IACpB,OAAO;QACL,UAAU,WAAW,KAAK,GAAG;QAC7B,WAAW,WAAW,KAAK,GAAG;QAC9B,aAAa,KAAK,YAAY;IAChC;AACF;;;IAvEsB;IAsDA;;AAtDA,+OAAA;AAsDA,+OAAA","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/get-climate-parameters.ts"],"sourcesContent":["'use server';\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst GetClimateParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"Central Valley, California\" or \"Jharkhand, India\".'),\n});\nexport type GetClimateParametersInput = z.infer<typeof GetClimateParametersInputSchema>;\n\nconst GetClimateParametersOutputSchema = z.object({\n  averageTemperatureC: z.number().describe('Estimated average yearly temperature in Celsius for the location.'),\n  averageHumidityPercent: z.number().describe('Estimated average yearly relative humidity percentage for the location.'),\n  averageMonthlyRainfallMM: z.number().describe('Estimated average monthly rainfall in millimeters for the location.'),\n});\nexport type GetClimateParametersOutput = z.infer<typeof GetClimateParametersOutputSchema>;\n\nexport async function getClimateParameters(input: GetClimateParametersInput): Promise<GetClimateParametersOutput> {\n  return getClimateParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'getClimateParametersPrompt',\n  input: {\n    schema: z.object({\n      locationDescription: z.string().describe('The location description.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      averageTemperatureC: z.number().describe('Estimated average yearly temperature in Celsius.'),\n      averageHumidityPercent: z.number().describe('Estimated average yearly relative humidity percentage (0-100).'),\n      averageMonthlyRainfallMM: z.number().describe('Estimated average monthly rainfall in millimeters.'),\n    }),\n  },\n  prompt: `You are an agricultural climate data provider. Based on the provided location description, estimate the typical average environmental parameters. Provide numerical estimates only.\n\nLocation Description: {{{locationDescription}}}\n\nEstimate the following average values for this location:\n- averageTemperatureC: Average monthly temperature in Celsius.\n- averageHumidityPercent: Average monthly relative humidity percentage (0-100).\n- averageMonthlyRainfallMM: Average monthly rainfall in millimeters.\n\nReturn only the numerical estimates in the specified JSON format. Ensure humidity is between 0 and 100.\n`,\n});\n\nconst getClimateParametersFlow = ai.defineFlow<\n  typeof GetClimateParametersInputSchema,\n  typeof GetClimateParametersOutputSchema\n>(\n  {\n    name: 'getClimateParametersFlow',\n    inputSchema: GetClimateParametersInputSchema,\n    outputSchema: GetClimateParametersOutputSchema,\n  },\n  async (input) => {\n    try {\n        const { output } = await prompt(input);\n\n        // Basic validation/clamping for humidity\n        if (output && output.averageHumidityPercent) {\n            output.averageHumidityPercent = Math.max(0, Math.min(100, output.averageHumidityPercent));\n        }\n        // Basic validation/clamping for rainfall\n        if (output && output.averageMonthlyRainfallMM < 0) {\n            output.averageMonthlyRainfallMM = 0;\n        }\n        // Optional: Add similar validation for temperature if needed\n\n        return output!;\n    } catch (error: any) {\n        // Log specific rate limit errors for debugging\n        if (error.message?.includes(\"429\") || error.details?.includes(\"429\")) {\n            console.error(`RATE LIMIT HIT: getClimateParameters for location \"${input.locationDescription}\". Error details:`, error.details || error.message);\n        } else {\n            console.error(`Error in getClimateParametersFlow for location \"${input.locationDescription}\":`, error);\n        }\n        // Re-throw the error to be handled by the calling component\n        throw error;\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC3C;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5C,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChD;AAGO,eAAe,uCAAkB,GAAlB,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3C;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACzC,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC5C,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChD;IACF;IACA,QAAQ,CAAC;;;;;;;;;;AAUX,CAAC;AACD;AAEA,MAAM,2BAA2B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAI5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI;QACA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;QAEhC,yCAAyC;QACzC,IAAI,UAAU,OAAO,sBAAsB,EAAE;YACzC,OAAO,sBAAsB,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,OAAO,sBAAsB;QAC3F;QACA,yCAAyC;QACzC,IAAI,UAAU,OAAO,wBAAwB,GAAG,GAAG;YAC/C,OAAO,wBAAwB,GAAG;QACtC;QACA,6DAA6D;QAE7D,OAAO;IACX,EAAE,OAAO,OAAY;QACjB,+CAA+C;QAC/C,IAAI,MAAM,OAAO,EAAE,SAAS,UAAU,MAAM,OAAO,EAAE,SAAS,QAAQ;YAClE,QAAQ,KAAK,CAAC,CAAC,mDAAmD,EAAE,MAAM,mBAAmB,CAAC,iBAAiB,CAAC,EAAE,MAAM,OAAO,IAAI,MAAM,OAAO;QACpJ,OAAO;YACH,QAAQ,KAAK,CAAC,CAAC,gDAAgD,EAAE,MAAM,mBAAmB,CAAC,EAAE,CAAC,EAAE;QACpG;QACA,4DAA4D;QAC5D,MAAM;IACV;AACF;;;IAjEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/ai/flows/get-soil-parameters.ts"],"sourcesContent":["'use server';\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst GetSoilParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"Central Valley, California\" or \"Coastal region, Florida\".'),\n});\nexport type GetSoilParametersInput = z.infer<typeof GetSoilParametersInputSchema>;\n\nconst GetSoilParametersOutputSchema = z.object({\n  nitrogen_kg_ha: z.number().describe('Estimated typical soil Nitrogen (N) content in kg per hectare for the location.'),\n  phosphorus_kg_ha: z.number().describe('Estimated typical soil Phosphorus (P) content in kg per hectare for the location.'),\n  potassium_kg_ha: z.number().describe('Estimated typical soil Potassium (K) content in kg per hectare for the location.'),\n  ph: z.number().describe('Estimated typical soil pH value for the location.'),\n});\nexport type GetSoilParametersOutput = z.infer<typeof GetSoilParametersOutputSchema>;\n\nexport async function getSoilParameters(input: GetSoilParametersInput): Promise<GetSoilParametersOutput> {\n  return getSoilParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'getSoilParametersPrompt',\n  input: {\n    schema: z.object({\n      locationDescription: z.string().describe('The location description.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      nitrogen_kg_ha: z.number().describe('Estimated typical Nitrogen (N) in kg/ha.'),\n      phosphorus_kg_ha: z.number().describe('Estimated typical Phosphorus (P) in kg/ha.'),\n      potassium_kg_ha: z.number().describe('Estimated typical Potassium (K) in kg/ha.'),\n      ph: z.number().describe('Estimated typical soil pH (e.g., 6.5).'),\n    }),\n  },\n  prompt: `You are an agricultural soil data provider. Based on the provided location description, estimate the typical average soil parameters. Provide numerical estimates only.\n\nLocation Description: {{{locationDescription}}}\n\nEstimate the following average soil values for this location:\n- nitrogen_kg_ha: Typical Nitrogen (N) content in kilograms per hectare (kg/ha).\n- phosphorus_kg_ha: Typical Phosphorus (P) content in kilograms per hectare (kg/ha).\n- potassium_kg_ha: Typical Potassium (K) content in kilograms per hectare (kg/ha).\n- ph: Typical soil pH value (e.g., between 4.0 and 9.0).\n\nReturn only the numerical estimates in the specified JSON format. Ensure pH is within a reasonable range (e.g., 3.5 to 10.0). Provide plausible values based on general knowledge of the location type.\n`,\n});\n\nconst getSoilParametersFlow = ai.defineFlow<\n  typeof GetSoilParametersInputSchema,\n  typeof GetSoilParametersOutputSchema\n>(\n  {\n    name: 'getSoilParametersFlow',\n    inputSchema: GetSoilParametersInputSchema,\n    outputSchema: GetSoilParametersOutputSchema,\n  },\n  async (input) => {\n    try {\n        const { output } = await prompt(input);\n\n        // Basic validation/clamping for pH\n        if (output && output.ph) {\n            output.ph = Math.max(3.5, Math.min(10.0, output.ph)); // Clamp pH between 3.5 and 10.0\n        }\n        // Basic validation for nutrients (ensure non-negative)\n        if (output && output.nitrogen_kg_ha < 0) output.nitrogen_kg_ha = 0;\n        if (output && output.phosphorus_kg_ha < 0) output.phosphorus_kg_ha = 0;\n        if (output && output.potassium_kg_ha < 0) output.potassium_kg_ha = 0;\n\n\n        return output!;\n    } catch (error: any) {\n        if (error.message?.includes(\"429\") || error.details?.includes(\"429\")) {\n            console.error(`RATE LIMIT HIT: getSoilParameters for location \"${input.locationDescription}\". Error details:`, error.details || error.message);\n        } else {\n            console.error(`Error in getSoilParametersFlow for location \"${input.locationDescription}\":`, error);\n        }\n        throw error; // Re-throw to be handled by the calling component\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;AACA;AAAA;;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC3C;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC1B;AAGO,eAAe,uCAAe,GAAf,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3C;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACpC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACtC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACrC,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;AAWX,CAAC;AACD;AAEA,MAAM,wBAAwB,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI;QACA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;QAEhC,mCAAmC;QACnC,IAAI,UAAU,OAAO,EAAE,EAAE;YACrB,OAAO,EAAE,GAAG,KAAK,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,MAAM,OAAO,EAAE,IAAI,gCAAgC;QAC1F;QACA,uDAAuD;QACvD,IAAI,UAAU,OAAO,cAAc,GAAG,GAAG,OAAO,cAAc,GAAG;QACjE,IAAI,UAAU,OAAO,gBAAgB,GAAG,GAAG,OAAO,gBAAgB,GAAG;QACrE,IAAI,UAAU,OAAO,eAAe,GAAG,GAAG,OAAO,eAAe,GAAG;QAGnE,OAAO;IACX,EAAE,OAAO,OAAY;QACjB,IAAI,MAAM,OAAO,EAAE,SAAS,UAAU,MAAM,OAAO,EAAE,SAAS,QAAQ;YAClE,QAAQ,KAAK,CAAC,CAAC,gDAAgD,EAAE,MAAM,mBAAmB,CAAC,iBAAiB,CAAC,EAAE,MAAM,OAAO,IAAI,MAAM,OAAO;QACjJ,OAAO;YACH,QAAQ,KAAK,CAAC,CAAC,6CAA6C,EAAE,MAAM,mBAAmB,CAAC,EAAE,CAAC,EAAE;QACjG;QACA,MAAM,OAAO,kDAAkD;IACnE;AACF;;;IAjEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 675, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 749, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 763, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/techr/Downloads/crop%20prediction/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 777, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}