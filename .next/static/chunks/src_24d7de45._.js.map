{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AACA,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/schemas/crop-form-schema.ts"],"sourcesContent":["import * as z from \"zod\";\n\nexport const CropFormSchema = z.object({\n  location: z.string().min(3, {\n    message: \"Location must be at least 3 characters.\",\n  }).max(100, { message: \"Location must be under 100 characters.\"}),\n  desiredCrops: z.string().max(200, { message: \"Desired crops list too long (max 200 chars).\"}).optional(),\n  soilType: z.string().max(100, { message: \"Soil type description too long (max 100 chars).\"}).optional(),\n  climateConditions: z.string().max(500, { message: \"Climate description too long (max 500 chars).\"}).optional(),\n  historicalYieldData: z.string().max(500, { message: \"Historical yield data too long (max 500 chars).\"}).optional(),\n  otherParameters: z.string().max(500, { message: \"Other parameters description too long (max 500 chars).\"}).optional(),\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,iBAAiB,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,EAAE;IACrC,UAAU,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;QAC1B,SAAS;IACX,GAAG,GAAG,CAAC,KAAK;QAAE,SAAS;IAAwC;IAC/D,cAAc,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAA8C,GAAG,QAAQ;IACtG,UAAU,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAAiD,GAAG,QAAQ;IACrG,mBAAmB,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAA+C,GAAG,QAAQ;IAC5G,qBAAqB,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAAiD,GAAG,QAAQ;IAChH,iBAAiB,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAAwD,GAAG,QAAQ;AACrH","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/reverse-geocode.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Provides reverse geocoding functionality.\n *\n * - reverseGeocode - A function that takes latitude and longitude and returns a location description.\n * - ReverseGeocodeInput - The input type for the reverseGeocode function.\n * - ReverseGeocodeOutput - The return type for the reverseGeocode function.\n */\n\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst ReverseGeocodeInputSchema = z.object({\n  latitude: z.number().describe('The latitude coordinate.'),\n  longitude: z.number().describe('The longitude coordinate.'),\n});\nexport type ReverseGeocodeInput = z.infer<typeof ReverseGeocodeInputSchema>;\n\nconst ReverseGeocodeOutputSchema = z.object({\n  locationDescription: z\n    .string()\n    .describe('A general description of the location based on the coordinates, e.g., \"near Sacramento, California, USA\". Include city, state/region, and country if possible.'),\n});\nexport type ReverseGeocodeOutput = z.infer<typeof ReverseGeocodeOutputSchema>;\n\nexport async function reverseGeocode(input: ReverseGeocodeInput): Promise<ReverseGeocodeOutput> {\n  return reverseGeocodeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'reverseGeocodePrompt',\n  input: {\n    schema: z.object({\n      latitude: z.number().describe('The latitude.'),\n      longitude: z.number().describe('The longitude.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      locationDescription: z\n        .string()\n        .describe('A general description of the location, including city, state/region, and country.'),\n    }),\n  },\n  prompt: `Based on the provided latitude and longitude coordinates, describe the general location. Include the city, state/region, and country if possible. Be concise.\n\nLatitude: {{{latitude}}}\nLongitude: {{{longitude}}}\n`,\n});\n\nconst reverseGeocodeFlow = ai.defineFlow<\n  typeof ReverseGeocodeInputSchema,\n  typeof ReverseGeocodeOutputSchema\n>(\n  {\n    name: 'reverseGeocodeFlow',\n    inputSchema: ReverseGeocodeInputSchema,\n    outputSchema: ReverseGeocodeOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IA0BsB","debugId":null}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/crop-form.tsx"],"sourcesContent":["\n\"use client\";\n\nimport * as React from \"react\";\nimport type * as z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Loader2, MapPin, Sprout, CloudSun, BookOpen, BrainCircuit, LocateFixed } from \"lucide-react\"; // Added icons\nimport { CropFormSchema } from \"@/schemas/crop-form-schema\";\nimport { reverseGeocode, type ReverseGeocodeInput } from \"@/ai/flows/reverse-geocode\"; // Import the new flow\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CropFormProps {\n  onSubmit: (values: z.infer<typeof CropFormSchema>) => void;\n  isLoading: boolean;\n}\n\nexport function CropForm({ onSubmit, isLoading }: CropFormProps) {\n  const [isFetchingLocation, setIsFetchingLocation] = React.useState(false);\n  const { toast } = useToast();\n  const form = useForm<z.infer<typeof CropFormSchema>>({\n    resolver: zodResolver(CropFormSchema),\n    defaultValues: {\n      location: \"\",\n      desiredCrops: \"\",\n      soilType: \"\",\n      climateConditions: \"\",\n      historicalYieldData: \"\",\n      otherParameters: \"\",\n    },\n  });\n\n  const handleGetCurrentLocation = async () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"Geolocation Error\",\n        description: \"Geolocation is not supported by your browser.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsFetchingLocation(true);\n    toast({\n      title: \"Fetching Location...\",\n      description: \"Getting your current coordinates.\",\n    });\n\n    try {\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\n          enableHighAccuracy: true,\n          timeout: 10000, // 10 seconds timeout\n          maximumAge: 0, // Force fresh location\n        });\n      });\n\n      const { latitude, longitude } = position.coords;\n      toast({\n        title: \"Coordinates Found\",\n        description: `Lat: ${latitude.toFixed(4)}, Lon: ${longitude.toFixed(4)}. Getting location description...`,\n      });\n\n      // Call Genkit flow for reverse geocoding\n      const geoInput: ReverseGeocodeInput = { latitude, longitude };\n      const geoResult = await reverseGeocode(geoInput);\n\n      if (geoResult.locationDescription) {\n        form.setValue(\"location\", geoResult.locationDescription, { shouldValidate: true });\n        toast({\n          title: \"Location Set!\",\n          description: `Location automatically set to: ${geoResult.locationDescription}`,\n           variant: \"default\",\n        });\n      } else {\n         toast({\n           title: \"Reverse Geocoding Failed\",\n           description: \"Could not determine location description from coordinates. Please enter manually.\",\n           variant: \"destructive\",\n         });\n      }\n\n    } catch (error: any) {\n      console.error(\"Error getting location:\", error);\n      let description = \"An unknown error occurred while fetching your location.\";\n      if (error.code === error.PERMISSION_DENIED) {\n        description = \"Permission denied. Please enable location services for this site.\";\n      } else if (error.code === error.POSITION_UNAVAILABLE) {\n        description = \"Location information is unavailable.\";\n      } else if (error.code === error.TIMEOUT) {\n        description = \"The request to get user location timed out.\";\n      } else if (error.message.includes('reverseGeocode')) {\n          description = `Failed to get location description: ${error.message}`;\n      }\n\n      toast({\n        title: \"Location Error\",\n        description: description,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsFetchingLocation(false);\n    }\n  };\n\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"location\"\n          render={({ field }) => (\n            <FormItem>\n               <div className=\"flex items-center justify-between\">\n                  <FormLabel className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-5 w-5 text-primary\" />\n                    Location\n                  </FormLabel>\n                   <Button\n                     type=\"button\"\n                     variant=\"outline\"\n                     size=\"sm\"\n                     onClick={handleGetCurrentLocation}\n                     disabled={isFetchingLocation || isLoading}\n                     className=\"flex items-center gap-1 text-xs\"\n                   >\n                     {isFetchingLocation ? (\n                       <Loader2 className=\"h-3 w-3 animate-spin\" />\n                     ) : (\n                       <LocateFixed className=\"h-3 w-3\" />\n                     )}\n                     Use Current Location\n                   </Button>\n                </div>\n              <FormControl>\n                <Input placeholder=\"e.g., Central Valley, California\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Provide the general location or use the button to detect it.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"desiredCrops\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"flex items-center gap-2\">\n                 <Sprout className=\"h-5 w-5 text-primary\" />\n                Desired Crops (Optional)\n              </FormLabel>\n              <FormControl>\n                <Input placeholder=\"e.g., tomatoes, lettuce, strawberries\" {...field} />\n              </FormControl>\n              <FormDescription>\n                List any specific crops you are interested in growing.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n         <FormField\n          control={form.control}\n          name=\"soilType\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"flex items-center gap-2\">\n                 {/* Placeholder Soil Icon - Consider a more specific icon */}\n                 <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-primary\"><path d=\"M2 12C2 6.5 6.5 2 12 2s10 4.5 10 10c0 2.7-1.1 5.2-2.9 7.1L12 22l-7.1-2.9C3.1 17.2 2 14.7 2 12Z\"/><path d=\"M12 16s-4-3-4-6 4-4 4-4 4 1 4 4-4 6-4 6Z\"/></svg>\n                 Soil Type (Optional)\n              </FormLabel>\n              <FormControl>\n                <Input placeholder=\"e.g., Loam, Clay, Sandy\" {...field} />\n              </FormControl>\n               <FormDescription>\n                Specify the soil type if known. AI will estimate if left blank.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n         <FormField\n          control={form.control}\n          name=\"climateConditions\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"flex items-center gap-2\">\n                <CloudSun className=\"h-5 w-5 text-primary\" />\n                Climate Conditions (Optional)\n              </FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"e.g., Avg Temp: 20°C, Rainfall: 500mm/year\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Describe the typical climate or provide specific data. AI will estimate if left blank.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"historicalYieldData\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-5 w-5 text-primary\" />\n                Historical Yield Data (Optional)\n              </FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"e.g., Corn: 5 tons/acre (2023), Soybeans: 2 tons/acre (2022)\" {...field} />\n              </FormControl>\n               <FormDescription>\n                Provide past yield data if available. AI will estimate if left blank.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n         <FormField\n          control={form.control}\n          name=\"otherParameters\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"flex items-center gap-2\">\n                 {/* Placeholder Other Icon */}\n                 <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-primary\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M12 16v-4\"/><path d=\"M12 8h.01\"/></svg>\n                Other Relevant Parameters (Optional)\n              </FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"e.g., Water availability, pest history, market prices\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Include any other factors that might influence crop choice.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button type=\"submit\" disabled={isLoading || isFetchingLocation} className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\">\n          {isLoading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Predicting...\n            </>\n          ) : (\n            <>\n              <BrainCircuit className=\"mr-2 h-4 w-4\" />\n              Predict Suitable Crops\n            </>\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1088, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1191, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 1239, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/prediction-results.tsx"],"sourcesContent":["import type { ImproveCropSuggestionsOutput } from \"@/ai/flows/improve-crop-suggestions\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, AlertTriangle, Info } from \"lucide-react\"; // Added icons\n\ninterface PredictionResultsProps {\n  results: ImproveCropSuggestionsOutput | null;\n  error?: string | null;\n}\n\n// Helper to determine confidence level based on reasons/actions\nconst getConfidenceLevel = (reasons: string[], actions: string[]): 'High' | 'Medium' | 'Low' => {\n  const reasonCount = reasons.length;\n  const actionCount = actions.length;\n\n  if (reasonCount >= 3 && actionCount <= 1) return 'High';\n  if (reasonCount >= 2 && actionCount <= 2) return 'Medium';\n  return 'Low';\n}\n\n// Helper to get icon based on confidence\nconst getConfidenceIcon = (level: 'High' | 'Medium' | 'Low') => {\n  switch (level) {\n    case 'High': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n    case 'Medium': return <Info className=\"h-5 w-5 text-yellow-500\" />;\n    case 'Low': return <AlertTriangle className=\"h-5 w-5 text-red-500\" />;\n    default: return null;\n  }\n}\n\nexport function PredictionResults({ results, error }: PredictionResultsProps) {\n  if (error) {\n    return (\n      <Card className=\"border-destructive bg-destructive/10\">\n        <CardHeader>\n          <CardTitle className=\"text-destructive flex items-center gap-2\">\n             <AlertTriangle className=\"h-5 w-5\" /> Error Generating Predictions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-destructive\">{error}</p>\n           <p className=\"mt-2 text-sm text-muted-foreground\">Please try refining your input or try again later.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!results || results.improvedSuggestions.length === 0) {\n    return (\n       <Card className=\"border-dashed border-muted\">\n         <CardHeader>\n           <CardTitle className=\"text-muted-foreground\">No Predictions Yet</CardTitle>\n         </CardHeader>\n         <CardContent>\n           <p className=\"text-muted-foreground\">Enter your farm details above and click \"Predict Suitable Crops\" to see suggestions.</p>\n         </CardContent>\n       </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n       <h2 className=\"text-2xl font-semibold tracking-tight\">Prediction Results</h2>\n      {results.improvedSuggestions.map((suggestion) => {\n         const confidence = getConfidenceLevel(suggestion.reasons, suggestion.suggestedActions);\n         const confidenceIcon = getConfidenceIcon(confidence);\n\n         return (\n          <Card key={suggestion.crop} className=\"shadow-md hover:shadow-lg transition-shadow duration-200\">\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                 <div>\n                  <CardTitle className=\"text-xl\">{suggestion.crop}</CardTitle>\n                  <CardDescription>Potential suitability analysis</CardDescription>\n                 </div>\n                 <Badge variant={confidence === 'High' ? 'default' : confidence === 'Medium' ? 'secondary' : 'destructive'} className=\"ml-auto flex items-center gap-1\">\n                   {confidenceIcon}\n                   {confidence} Confidence\n                 </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-md font-semibold mb-1\">Reasons for Suggestion:</h3>\n                <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                  {suggestion.reasons.map((reason, index) => (\n                    <li key={`reason-${index}`}>{reason}</li>\n                  ))}\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"text-md font-semibold mb-1\">Suggested Actions to Increase Confidence:</h3>\n                 {suggestion.suggestedActions.length > 0 ? (\n                    <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                    {suggestion.suggestedActions.map((action, index) => (\n                        <li key={`action-${index}`}>{action}</li>\n                    ))}\n                    </ul>\n                 ) : (\n                    <p className=\"text-sm text-muted-foreground italic\">No specific actions recommended, indicating higher confidence.</p>\n                 )}\n              </div>\n            </CardContent>\n          </Card>\n         )\n      })}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AAOA;AACA,kYAAiE,cAAc;AAA/E;AAAA;;;;;AAOA,gEAAgE;AAChE,MAAM,qBAAqB,CAAC,SAAmB;IAC7C,MAAM,cAAc,QAAQ,MAAM;IAClC,MAAM,cAAc,QAAQ,MAAM;IAElC,IAAI,eAAe,KAAK,eAAe,GAAG,OAAO;IACjD,IAAI,eAAe,KAAK,eAAe,GAAG,OAAO;IACjD,OAAO;AACT;AAEA,yCAAyC;AACzC,MAAM,oBAAoB,CAAC;IACzB,OAAQ;QACN,KAAK;YAAQ,qBAAO,6LAAC,8NAAA,CAAA,cAAW;gBAAC,WAAU;;;;;;QAC3C,KAAK;YAAU,qBAAO,6LAAC,qMAAA,CAAA,OAAI;gBAAC,WAAU;;;;;;QACtC,KAAK;YAAO,qBAAO,6LAAC,2NAAA,CAAA,gBAAa;gBAAC,WAAU;;;;;;QAC5C;YAAS,OAAO;IAClB;AACF;AAEO,SAAS,kBAAkB,EAAE,OAAO,EAAE,KAAK,EAA0B;IAC1E,IAAI,OAAO;QACT,qBACE,6LAAC,mIAAA,CAAA,OAAI;YAAC,WAAU;;8BACd,6LAAC,mIAAA,CAAA,aAAU;8BACT,cAAA,6LAAC,mIAAA,CAAA,YAAS;wBAAC,WAAU;;0CAClB,6LAAC,2NAAA,CAAA,gBAAa;gCAAC,WAAU;;;;;;4BAAY;;;;;;;;;;;;8BAG1C,6LAAC,mIAAA,CAAA,cAAW;;sCACV,6LAAC;4BAAE,WAAU;sCAAoB;;;;;;sCAChC,6LAAC;4BAAE,WAAU;sCAAqC;;;;;;;;;;;;;;;;;;IAI3D;IAEA,IAAI,CAAC,WAAW,QAAQ,mBAAmB,CAAC,MAAM,KAAK,GAAG;QACxD,qBACG,6LAAC,mIAAA,CAAA,OAAI;YAAC,WAAU;;8BACd,6LAAC,mIAAA,CAAA,aAAU;8BACT,cAAA,6LAAC,mIAAA,CAAA,YAAS;wBAAC,WAAU;kCAAwB;;;;;;;;;;;8BAE/C,6LAAC,mIAAA,CAAA,cAAW;8BACV,cAAA,6LAAC;wBAAE,WAAU;kCAAwB;;;;;;;;;;;;;;;;;IAI9C;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACZ,6LAAC;gBAAG,WAAU;0BAAwC;;;;;;YACtD,QAAQ,mBAAmB,CAAC,GAAG,CAAC,CAAC;gBAC/B,MAAM,aAAa,mBAAmB,WAAW,OAAO,EAAE,WAAW,gBAAgB;gBACrF,MAAM,iBAAiB,kBAAkB;gBAEzC,qBACC,6LAAC,mIAAA,CAAA,OAAI;oBAAuB,WAAU;;sCACpC,6LAAC,mIAAA,CAAA,aAAU;sCACT,cAAA,6LAAC;gCAAI,WAAU;;kDACZ,6LAAC;;0DACA,6LAAC,mIAAA,CAAA,YAAS;gDAAC,WAAU;0DAAW,WAAW,IAAI;;;;;;0DAC/C,6LAAC,mIAAA,CAAA,kBAAe;0DAAC;;;;;;;;;;;;kDAElB,6LAAC,oIAAA,CAAA,QAAK;wCAAC,SAAS,eAAe,SAAS,YAAY,eAAe,WAAW,cAAc;wCAAe,WAAU;;4CAClH;4CACA;4CAAW;;;;;;;;;;;;;;;;;;sCAInB,6LAAC,mIAAA,CAAA,cAAW;4BAAC,WAAU;;8CACrB,6LAAC;;sDACC,6LAAC;4CAAG,WAAU;sDAA6B;;;;;;sDAC3C,6LAAC;4CAAG,WAAU;sDACX,WAAW,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,sBAC/B,6LAAC;8DAA4B;mDAApB,CAAC,OAAO,EAAE,OAAO;;;;;;;;;;;;;;;;8CAIhC,6LAAC;;sDACC,6LAAC;4CAAG,WAAU;sDAA6B;;;;;;wCACzC,WAAW,gBAAgB,CAAC,MAAM,GAAG,kBACnC,6LAAC;4CAAG,WAAU;sDACb,WAAW,gBAAgB,CAAC,GAAG,CAAC,CAAC,QAAQ,sBACtC,6LAAC;8DAA4B;mDAApB,CAAC,OAAO,EAAE,OAAO;;;;;;;;;iEAI9B,6LAAC;4CAAE,WAAU;sDAAuC;;;;;;;;;;;;;;;;;;;mBA/BnD,WAAW,IAAI;;;;;YAqC9B;;;;;;;AAGN;KA9EgB","debugId":null}},
    {"offset": {"line": 1559, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,6LAAC,wKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;;AAIf,UAAU,WAAW,GAAG,wKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1597, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-initial-parameters.ts"],"sourcesContent":["// Use server directive.\n'use server';\n\n/**\n * @fileOverview Provides initial crop parameters based on a general location description and desired crops.\n *\n * - generateInitialParameters - A function that generates initial parameters for crop prediction.\n * - GenerateInitialParametersInput - The input type for the generateInitialParameters function.\n * - GenerateInitialParametersOutput - The return type for the generateInitialParameters function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateInitialParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"near the coast of California\".'),\n  desiredCrops: z.string().describe('A comma-separated list of desired crops, e.g., \"tomatoes, lettuce, strawberries\".'),\n});\nexport type GenerateInitialParametersInput = z.infer<typeof GenerateInitialParametersInputSchema>;\n\nconst GenerateInitialParametersOutputSchema = z.object({\n  soilType: z.string().describe('The predicted soil type for the given location.'),\n  climateConditions: z.string().describe('A description of the predicted climate conditions for the given location.'),\n  historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n  otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n});\nexport type GenerateInitialParametersOutput = z.infer<typeof GenerateInitialParametersOutputSchema>;\n\nexport async function generateInitialParameters(input: GenerateInitialParametersInput): Promise<GenerateInitialParametersOutput> {\n  return generateInitialParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateInitialParametersPrompt',\n  input: {\n    schema: z.object({\n      locationDescription: z.string().describe('A general description of the location.'),\n      desiredCrops: z.string().describe('A comma-separated list of desired crops.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      soilType: z.string().describe('The predicted soil type for the given location.'),\n      climateConditions: z.string().describe('A description of the predicted climate conditions for the given location.'),\n      historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n      otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n    }),\n  },\n  prompt: `You are an expert agricultural consultant. A user is starting a crop planning application and needs initial parameters for their location and desired crops.\n\n  Based on the following information, provide initial parameters that the user can use. Be as specific as possible.\n\n  Location Description: {{{locationDescription}}}\n  Desired Crops: {{{desiredCrops}}}\n\n  Output the following parameters:\n  - soilType: The predicted soil type for the given location.\n  - climateConditions: A description of the predicted climate conditions for the given location, including average temperature and rainfall.\n  - historicalYieldData: An estimate of the historical yield data (e.g., tons per acre) for the specified crops in the given location.\n  - otherRelevantParameters: Any other parameters that might be relevant to crop prediction, such as pest pressure or market demand.\n  `,\n});\n\nconst generateInitialParametersFlow = ai.defineFlow<\n  typeof GenerateInitialParametersInputSchema,\n  typeof GenerateInitialParametersOutputSchema\n>(\n  {\n    name: 'generateInitialParametersFlow',\n    inputSchema: GenerateInitialParametersInputSchema,\n    outputSchema: GenerateInitialParametersOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;;IA4BF","debugId":null}},
    {"offset": {"line": 1610, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/improve-crop-suggestions.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Flow to improve crop suggestions by providing reasons and actions.\n *\n * - improveCropSuggestions - A function that takes crop suggestions and provides reasons and actions to increase confidence.\n * - ImproveCropSuggestionsInput - The input type for the improveCropSuggestions function.\n * - ImproveCropSuggestionsOutput - The return type for the improveCropSuggestions function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst ImproveCropSuggestionsInputSchema = z.object({\n  cropSuggestions: z\n    .array(z.string())\n    .describe('An array of suggested crops for the given conditions.'),\n  location: z.string().describe('The location for which the crop suggestions are made.'),\n  soilType: z.string().describe('The soil type of the location.'),\n  climateConditions: z.string().describe('The climate conditions of the location.'),\n  historicalYieldData: z.string().describe('Historical yield data for the location.'),\n});\nexport type ImproveCropSuggestionsInput = z.infer<\n  typeof ImproveCropSuggestionsInputSchema\n>;\n\nconst ImproveCropSuggestionsOutputSchema = z.object({\n  improvedSuggestions: z.array(\n    z.object({\n      crop: z.string().describe('The suggested crop.'),\n      reasons: z.array(z.string()).describe('Reasons for suggesting the crop.'),\n      suggestedActions: z\n        .array(z.string())\n        .describe('Suggested actions to increase confidence in the crop.'),\n    })\n  ),\n});\nexport type ImproveCropSuggestionsOutput = z.infer<\n  typeof ImproveCropSuggestionsOutputSchema\n>;\n\nexport async function improveCropSuggestions(\n  input: ImproveCropSuggestionsInput\n): Promise<ImproveCropSuggestionsOutput> {\n  return improveCropSuggestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'improveCropSuggestionsPrompt',\n  input: {\n    schema: z.object({\n      cropSuggestions: z\n        .array(z.string())\n        .describe('An array of suggested crops for the given conditions.'),\n      location: z.string().describe('The location for which the crop suggestions are made.'),\n      soilType: z.string().describe('The soil type of the location.'),\n      climateConditions: z.string().describe('The climate conditions of the location.'),\n      historicalYieldData: z.string().describe('Historical yield data for the location.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      improvedSuggestions: z.array(\n        z.object({\n          crop: z.string().describe('The suggested crop.'),\n          reasons: z.array(z.string()).describe('Reasons for suggesting the crop.'),\n          suggestedActions: z\n            .array(z.string())\n            .describe('Suggested actions to increase confidence in the crop.'),\n        })\n      ),\n    }),\n  },\n  prompt: `For the following crop suggestions, provide reasons for the suggestions and suggested actions to increase confidence in the crop. Consider the location, soil type, climate conditions and historical yield data.\n\nCrop Suggestions: {{{cropSuggestions}}}\nLocation: {{{location}}}\nSoil Type: {{{soilType}}}\nClimate Conditions: {{{climateConditions}}}\nHistorical Yield Data: {{{historicalYieldData}}}\n\nFormat the output as a JSON array of objects, where each object has the following keys:\n- crop: The suggested crop.\n- reasons: An array of reasons for suggesting the crop.\n- suggestedActions: An array of suggested actions to increase confidence in the crop.\n\nMake sure that the suggested actions are concrete and actionable.\n`,\n});\n\nconst improveCropSuggestionsFlow = ai.defineFlow<\n  typeof ImproveCropSuggestionsInputSchema,\n  typeof ImproveCropSuggestionsOutputSchema\n>(\n  {\n    name: 'improveCropSuggestionsFlow',\n    inputSchema: ImproveCropSuggestionsInputSchema,\n    outputSchema: ImproveCropSuggestionsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IAyCsB","debugId":null}},
    {"offset": {"line": 1622, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport type * as z from \"zod\";\nimport { CropForm } from \"@/components/crop-form\";\nimport { PredictionResults } from \"@/components/prediction-results\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { generateInitialParameters, type GenerateInitialParametersInput, type GenerateInitialParametersOutput } from \"@/ai/flows/generate-initial-parameters\";\nimport { improveCropSuggestions, type ImproveCropSuggestionsInput, type ImproveCropSuggestionsOutput } from \"@/ai/flows/improve-crop-suggestions\";\nimport type { CropFormSchema } from \"@/schemas/crop-form-schema\";\nimport { Leaf } from \"lucide-react\";\n\n\nexport default function Home() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [predictionResults, setPredictionResults] = useState<ImproveCropSuggestionsOutput | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const handleFormSubmit = async (values: z.infer<typeof CropFormSchema>) => {\n    setIsLoading(true);\n    setError(null);\n    setPredictionResults(null); // Clear previous results\n\n    try {\n      // Step 1: Generate initial parameters if some optional fields are missing\n      let initialParams: GenerateInitialParametersOutput | null = null;\n      if (!values.soilType || !values.climateConditions || !values.historicalYieldData) {\n        const initialParamsInput: GenerateInitialParametersInput = {\n          locationDescription: values.location,\n          desiredCrops: values.desiredCrops || \"common crops for the area\", // Provide default if empty\n        };\n        toast({\n          title: \"Generating Initial Parameters...\",\n          description: \"Using AI to estimate missing farm details.\",\n        });\n        initialParams = await generateInitialParameters(initialParamsInput);\n        toast({\n           title: \"Initial Parameters Generated\",\n           description: \"Estimated soil, climate, and yield data.\",\n           variant: \"default\",\n         });\n      }\n\n      // Step 2: Prepare input for crop suggestion improvement\n       const improveInput: ImproveCropSuggestionsInput = {\n         // For cropSuggestions, we can start with desired crops or let the AI suggest based on params\n         cropSuggestions: values.desiredCrops ? values.desiredCrops.split(',').map(s => s.trim()).filter(s => s) : [],\n         location: values.location,\n         soilType: values.soilType || initialParams?.soilType || \"Unknown\",\n         climateConditions: values.climateConditions || initialParams?.climateConditions || \"Unknown\",\n         historicalYieldData: values.historicalYieldData || initialParams?.historicalYieldData || \"Unknown\",\n         // We don't have a direct 'otherRelevantParameters' mapping in improveCropSuggestions,\n         // but the prompt implicitly considers location, soil, climate, history.\n         // If needed, the prompt could be adjusted or we pass 'otherParameters' contextually.\n       };\n\n       // If no desired crops provided, ask AI for initial broad suggestions based on generated params\n       if (improveInput.cropSuggestions.length === 0) {\n            toast({\n              title: \"Requesting Initial Crop Ideas...\",\n              description: \"No desired crops specified, asking AI for possibilities.\",\n            });\n            // Note: The current improveCropSuggestions flow expects *some* initial suggestions.\n            // A robust solution might need another AI call here to *generate* initial crops based on params,\n            // or modify the improveCropSuggestions prompt to handle an empty initial list.\n            // For now, we'll provide a generic placeholder to satisfy the schema,\n            // relying on the prompt's context to generate relevant suggestions.\n            improveInput.cropSuggestions = [\"common regional crops\"];\n       }\n\n\n      toast({\n        title: \"Predicting Suitable Crops...\",\n        description: \"Analyzing your farm data with AI.\",\n      });\n\n      // Step 3: Call the improveCropSuggestions flow\n      const results = await improveCropSuggestions(improveInput);\n      setPredictionResults(results);\n       toast({\n         title: \"Prediction Complete!\",\n         description: \"Crop suggestions are ready below.\",\n         variant: \"default\", // Use 'default' for success-like appearance\n       });\n\n    } catch (err) {\n      console.error(\"Prediction failed:\", err);\n      const errorMessage = err instanceof Error ? err.message : \"An unexpected error occurred.\";\n      setError(`Failed to generate predictions: ${errorMessage}`);\n      toast({\n        title: \"Prediction Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"container mx-auto p-4 md:p-8 max-w-4xl\">\n       <header className=\"flex items-center gap-3 mb-8\">\n         <Leaf className=\"h-8 w-8 text-primary\" />\n        <h1 className=\"text-3xl font-bold text-primary\">CropWise</h1>\n        <span className=\"text-muted-foreground\">AI-Powered Crop Prediction</span>\n       </header>\n\n      <div className=\"grid grid-cols-1 gap-8\">\n         <Card className=\"shadow-sm\">\n           <CardHeader>\n             <CardTitle>Farm Data Input</CardTitle>\n             <CardDescription>\n               Enter the details about your farm to get crop predictions. More details lead to better predictions.\n             </CardDescription>\n           </CardHeader>\n           <CardContent>\n            <CropForm onSubmit={handleFormSubmit} isLoading={isLoading} />\n           </CardContent>\n         </Card>\n\n         <Separator />\n\n         <PredictionResults results={predictionResults} error={error} />\n       </div>\n\n       <footer className=\"mt-12 text-center text-sm text-muted-foreground\">\n           Powered by Firebase & Genkit\n       </footer>\n    </main>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}