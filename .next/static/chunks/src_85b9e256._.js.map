{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AACA,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/schemas/crop-form-schema.ts"],"sourcesContent":["import * as z from \"zod\";\n\nexport const CropFormSchema = z.object({\n  location: z.string().min(3, {\n    message: \"Location must be at least 3 characters.\",\n  }).max(100, { message: \"Location must be under 100 characters.\"}),\n  desiredCrops: z.string().max(200, { message: \"Desired crops list too long (max 200 chars).\"}).optional(),\n  soilType: z.string().max(100, { message: \"Soil type description too long (max 100 chars).\"}).optional(),\n  climateConditions: z.string().max(500, { message: \"Climate description too long (max 500 chars).\"}).optional(),\n  historicalYieldData: z.string().max(500, { message: \"Historical yield data too long (max 500 chars).\"}).optional(),\n  otherParameters: z.string().max(500, { message: \"Other parameters description too long (max 500 chars).\"}).optional(),\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,iBAAiB,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,EAAE;IACrC,UAAU,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;QAC1B,SAAS;IACX,GAAG,GAAG,CAAC,KAAK;QAAE,SAAS;IAAwC;IAC/D,cAAc,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAA8C,GAAG,QAAQ;IACtG,UAAU,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAAiD,GAAG,QAAQ;IACrG,mBAAmB,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAA+C,GAAG,QAAQ;IAC5G,qBAAqB,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAAiD,GAAG,QAAQ;IAChH,iBAAiB,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,KAAK;QAAE,SAAS;IAAwD,GAAG,QAAQ;AACrH","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/reverse-geocode.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Provides reverse geocoding functionality.\n *\n * - reverseGeocode - A function that takes latitude and longitude and returns a location description.\n * - ReverseGeocodeInput - The input type for the reverseGeocode function.\n * - ReverseGeocodeOutput - The return type for the reverseGeocode function.\n */\n\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst ReverseGeocodeInputSchema = z.object({\n  latitude: z.number().describe('The latitude coordinate.'),\n  longitude: z.number().describe('The longitude coordinate.'),\n});\nexport type ReverseGeocodeInput = z.infer<typeof ReverseGeocodeInputSchema>;\n\nconst ReverseGeocodeOutputSchema = z.object({\n  locationDescription: z\n    .string()\n    .describe('A general description of the location based on the coordinates, e.g., \"near Sacramento, California, USA\". Include city, state/region, and country if possible.'),\n});\nexport type ReverseGeocodeOutput = z.infer<typeof ReverseGeocodeOutputSchema>;\n\nexport async function reverseGeocode(input: ReverseGeocodeInput): Promise<ReverseGeocodeOutput> {\n  return reverseGeocodeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'reverseGeocodePrompt',\n  input: {\n    schema: z.object({\n      latitude: z.number().describe('The latitude.'),\n      longitude: z.number().describe('The longitude.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      locationDescription: z\n        .string()\n        .describe('A general description of the location, including city, state/region, and country.'),\n    }),\n  },\n  prompt: `Based on the provided latitude and longitude coordinates, describe the general location. Include the city, state/region, and country if possible. Be concise.\n\nLatitude: {{{latitude}}}\nLongitude: {{{longitude}}}\n`,\n});\n\nconst reverseGeocodeFlow = ai.defineFlow<\n  typeof ReverseGeocodeInputSchema,\n  typeof ReverseGeocodeOutputSchema\n>(\n  {\n    name: 'reverseGeocodeFlow',\n    inputSchema: ReverseGeocodeInputSchema,\n    outputSchema: ReverseGeocodeOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IA0BsB","debugId":null}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 553, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/map-placeholder.tsx"],"sourcesContent":["\n\"use client\";\n\nimport * as React from \"react\";\nimport Image from \"next/image\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MapPin } from \"lucide-react\";\n\ninterface MapPlaceholderProps {\n  latitude?: number | null;\n  longitude?: number | null;\n  locationName?: string | null;\n}\n\n// Basic debounce function\nfunction debounce<F extends (...args: any[]) => void>(func: F, wait: number): (...args: Parameters<F>) => void {\n  let timeoutId: ReturnType<typeof setTimeout> | null = null;\n  return function(this: ThisParameterType<F>, ...args: Parameters<F>) {\n    if (timeoutId !== null) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => func.apply(this, args), wait);\n  };\n}\n\n\nexport function MapPlaceholder({ latitude, longitude, locationName }: MapPlaceholderProps) {\n  const [mapUrl, setMapUrl] = React.useState<string | null>(null);\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | null>(null);\n\n  const generateMapUrl = React.useCallback(async (lat: number, lon: number) => {\n     setIsLoading(true);\n     setError(null);\n     // Placeholder: In a real scenario, you might fetch a static map image URL\n     // For now, we use picsum.photos as a stand-in, using coords slightly to vary the image.\n     // A better approach would be a static map API (like Mapbox or Google Static Maps)\n     // but that requires API keys and setup.\n     try {\n        // Simulate fetching a map image\n        await new Promise(resolve => setTimeout(resolve, 500)); // Simulate network delay\n        const width = 600;\n        const height = 400;\n        // Use coordinates to slightly change the image seed for variation\n        const seed = Math.round(lat * 100 + lon * 100);\n         setMapUrl(`https://picsum.photos/seed/${seed}/${width}/${height}`);\n     } catch (e) {\n         setError(\"Could not load map image.\");\n         console.error(\"Map generation error:\", e);\n     } finally {\n        setIsLoading(false);\n     }\n  }, []);\n\n  // Debounced version of generateMapUrl\n   const debouncedGenerateMapUrl = React.useMemo(\n       () => debounce(generateMapUrl, 1000),\n       [generateMapUrl]\n     );\n\n\n  React.useEffect(() => {\n      if (latitude != null && longitude != null) {\n         debouncedGenerateMapUrl(latitude, longitude);\n      } else {\n         setMapUrl(null); // Clear map if no coordinates\n         setIsLoading(false);\n         setError(null);\n      }\n      // Cleanup debounce timer on unmount or dependency change\n      return () => {\n           if ((debouncedGenerateMapUrl as any).cancel) {\n              (debouncedGenerateMapUrl as any).cancel(); // If debounce library supports cancel\n           }\n         };\n    }, [latitude, longitude, debouncedGenerateMapUrl]);\n\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MapPin className=\"h-5 w-5 text-primary\" />\n          Location Visualizer\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {isLoading && <p className=\"text-muted-foreground text-sm\">Loading map...</p>}\n        {error && <p className=\"text-destructive text-sm\">{error}</p>}\n        {!isLoading && !error && mapUrl && latitude != null && longitude != null && (\n          <div className=\"aspect-video w-full relative overflow-hidden rounded-md border\">\n             <Image\n                 src={mapUrl}\n                 alt={`Map placeholder for ${locationName || 'selected location'}`}\n                 fill\n                 style={{ objectFit: \"cover\" }}\n                 data-ai-hint=\"map aerial view\"\n             />\n          </div>\n\n        )}\n         {!isLoading && !error && !mapUrl && (\n          <div className=\"aspect-video w-full flex items-center justify-center bg-muted/50 rounded-md border border-dashed\">\n            <p className=\"text-muted-foreground text-center p-4\">\n              {locationName\n                ? `Enter coordinates or use \"Use Current Location\" to see map for ${locationName}`\n                : \"Enter a location to see a map preview.\"}\n            </p>\n          </div>\n        )}\n         {locationName && <p className=\"text-sm text-muted-foreground mt-2\">Showing map for: {locationName}</p>}\n         {latitude != null && longitude != null && (\n           <p className=\"text-xs text-muted-foreground\">Lat: {latitude.toFixed(4)}, Lon: {longitude.toFixed(4)}</p>\n         )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 767, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/aspect-ratio.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n\n"],"names":[],"mappings":";;;AAIA;AAHA;;AAKA,MAAM,cAAc,8KAAA,CAAA,OAAyB","debugId":null}},
    {"offset": {"line": 784, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/crop-form.tsx"],"sourcesContent":["\n\"use client\";\n\nimport * as React from \"react\";\nimport Image from \"next/image\";\nimport type * as z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Loader2, MapPin, Sprout, CloudSun, BookOpen, BrainCircuit, LocateFixed, Image as ImageIcon } from \"lucide-react\";\nimport { CropFormSchema } from \"@/schemas/crop-form-schema\";\nimport { reverseGeocode, type ReverseGeocodeInput } from \"@/ai/flows/reverse-geocode\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MapPlaceholder } from \"@/components/map-placeholder\"; // Import the new map component\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\"; // Import AspectRatio\n\ninterface CropFormProps {\n  onSubmit: (values: z.infer<typeof CropFormSchema>) => void;\n  isLoading: boolean;\n}\n\nexport function CropForm({ onSubmit, isLoading }: CropFormProps) {\n  const [isFetchingLocation, setIsFetchingLocation] = React.useState(false);\n  const [currentLatitude, setCurrentLatitude] = React.useState<number | null>(null);\n  const [currentLongitude, setCurrentLongitude] = React.useState<number | null>(null);\n  const { toast } = useToast();\n  const form = useForm<z.infer<typeof CropFormSchema>>({\n    resolver: zodResolver(CropFormSchema),\n    defaultValues: {\n      location: \"\",\n      desiredCrops: \"\",\n      soilType: \"\",\n      climateConditions: \"\",\n      historicalYieldData: \"\",\n      otherParameters: \"\",\n    },\n  });\n\n   // Watch location field changes to update map potentially\n   const locationValue = form.watch(\"location\");\n\n  const handleGetCurrentLocation = async () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"Geolocation Error\",\n        description: \"Geolocation is not supported by your browser.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsFetchingLocation(true);\n    setCurrentLatitude(null); // Reset coordinates while fetching\n    setCurrentLongitude(null);\n    toast({\n      title: \"Fetching Location...\",\n      description: \"Getting your current coordinates.\",\n    });\n\n    try {\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\n          enableHighAccuracy: true,\n          timeout: 15000, // Increased timeout\n          maximumAge: 0,\n        });\n      });\n\n      const { latitude, longitude } = position.coords;\n      setCurrentLatitude(latitude); // Update state for map\n      setCurrentLongitude(longitude);\n      toast({\n        title: \"Coordinates Found\",\n        description: `Lat: ${latitude.toFixed(4)}, Lon: ${longitude.toFixed(4)}. Getting location description...`,\n      });\n\n      const geoInput: ReverseGeocodeInput = { latitude, longitude };\n      const geoResult = await reverseGeocode(geoInput);\n\n      if (geoResult.locationDescription) {\n        form.setValue(\"location\", geoResult.locationDescription, { shouldValidate: true });\n        toast({\n          title: \"Location Set!\",\n          description: `Location automatically set to: ${geoResult.locationDescription}`,\n           variant: \"default\",\n        });\n      } else {\n         toast({\n           title: \"Reverse Geocoding Failed\",\n           description: \"Could not determine location description from coordinates. Please enter manually.\",\n           variant: \"warning\", // Use warning instead of destructive\n         });\n         // Still set coordinates, even if description fails\n         form.setValue(\"location\", `Coords: ${latitude.toFixed(4)}, ${longitude.toFixed(4)}`, { shouldValidate: true });\n      }\n\n    } catch (error: any) {\n      console.error(\"Error getting location:\", error);\n      let description = \"An unknown error occurred while fetching your location.\";\n      if (error.code === error.PERMISSION_DENIED) {\n        description = \"Permission denied. Please enable location services for this site.\";\n      } else if (error.code === error.POSITION_UNAVAILABLE) {\n        description = \"Location information is unavailable.\";\n      } else if (error.code === error.TIMEOUT) {\n        description = \"The request to get user location timed out.\";\n      } else if (error.message?.includes('reverseGeocode')) {\n          description = `Failed to get location description: ${error.message}`;\n      }\n\n      toast({\n        title: \"Location Error\",\n        description: description,\n        variant: \"destructive\",\n      });\n       setCurrentLatitude(null); // Clear coordinates on error\n       setCurrentLongitude(null);\n    } finally {\n      setIsFetchingLocation(false);\n    }\n  };\n\n   // Handle manual location input potentially clearing coordinates\n   React.useEffect(() => {\n     // If the location input changes *manually* (not via Use Current Location button),\n     // and it doesn't look like coordinates, clear the lat/lon state.\n     const location = form.getValues(\"location\");\n     if (!isFetchingLocation && location && !/Coords:/.test(location)) {\n       // Simple check; could be improved\n       setCurrentLatitude(null);\n       setCurrentLongitude(null);\n     }\n   }, [locationValue, form, isFetchingLocation]);\n\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\"> {/* Increased spacing */}\n\n        {/* Location Section with Map */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 items-start\">\n          <div className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex items-center justify-between\">\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-5 w-5 text-primary\" />\n                      Location\n                    </FormLabel>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleGetCurrentLocation}\n                      disabled={isFetchingLocation || isLoading}\n                      className=\"flex items-center gap-1 text-xs\"\n                    >\n                      {isFetchingLocation ? (\n                        <Loader2 className=\"h-3 w-3 animate-spin\" />\n                      ) : (\n                        <LocateFixed className=\"h-3 w-3\" />\n                      )}\n                      Use Current Location\n                    </Button>\n                  </div>\n                  <FormControl>\n                    <Input placeholder=\"e.g., Central Valley, California or Coordinates\" {...field} />\n                  </FormControl>\n                  <FormDescription>\n                    Provide a place name, address, or use the button.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             <FormField\n              control={form.control}\n              name=\"desiredCrops\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\">\n                    <Sprout className=\"h-5 w-5 text-primary\" />\n                    Desired Crops (Optional)\n                  </FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., tomatoes, lettuce, strawberries\" {...field} />\n                  </FormControl>\n                  <FormDescription>\n                    List any specific crops you are interested in growing (comma-separated).\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n           {/* Map Placeholder */}\n            <MapPlaceholder latitude={currentLatitude} longitude={currentLongitude} locationName={locationValue} />\n\n        </div>\n\n        {/* Soil Section */}\n         <FormField\n          control={form.control}\n          name=\"soilType\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"flex items-center gap-2\">\n                 <ImageIcon className=\"h-5 w-5 text-primary\" /> {/* Using ImageIcon as a generic placeholder */}\n                 Soil Type & Appearance (Optional)\n              </FormLabel>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-start\">\n                 <div className=\"md:col-span-2\">\n                   <FormControl>\n                     <Input placeholder=\"e.g., Loam, Clay, Sandy, Dark Brown, Crumbly\" {...field} />\n                   </FormControl>\n                   <FormDescription>\n                    Describe the soil type or appearance if known. AI will estimate if left blank.\n                   </FormDescription>\n                   <FormMessage />\n                 </div>\n                 {/* Soil Image Placeholder */}\n                  <div className=\"w-full\">\n                    <AspectRatio ratio={4 / 3} className=\"bg-muted/50 rounded-md border border-dashed flex items-center justify-center\">\n                      <Image\n                          src={`https://picsum.photos/seed/${field.value || 'soil'}/400/300`}\n                          alt=\"Soil type placeholder image\"\n                          width={400}\n                          height={300}\n                          className=\"rounded-md object-cover\"\n                          data-ai-hint=\"soil texture close up\"\n                        />\n                    </AspectRatio>\n                     <p className=\"text-xs text-muted-foreground text-center mt-1\">Soil Visual (Placeholder)</p>\n                  </div>\n              </div>\n            </FormItem>\n          )}\n        />\n\n         {/* Climate and History Section */}\n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n           <FormField\n            control={form.control}\n            name=\"climateConditions\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"flex items-center gap-2\">\n                  <CloudSun className=\"h-5 w-5 text-primary\" />\n                  Climate Conditions (Optional)\n                </FormLabel>\n                <FormControl>\n                  <Textarea placeholder=\"e.g., Avg Temp: 20°C, Rainfall: 500mm/year, Sunny summers\" {...field} rows={3} />\n                </FormControl>\n                <FormDescription>\n                  Describe typical climate or provide data. AI estimates if blank.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"historicalYieldData\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5 text-primary\" />\n                  Historical Yield Data (Optional)\n                </FormLabel>\n                <FormControl>\n                  <Textarea placeholder=\"e.g., Corn: 5 tons/acre (2023), Soybeans: 2 tons/acre (2022)\" {...field} rows={3} />\n                </FormControl>\n                 <FormDescription>\n                  Provide past yield data if available. AI estimates if blank.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n\n         <FormField\n          control={form.control}\n          name=\"otherParameters\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"flex items-center gap-2\">\n                 {/* Placeholder Other Icon */}\n                 <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-primary\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M12 16v-4\"/><path d=\"M12 8h.01\"/></svg>\n                Other Relevant Parameters (Optional)\n              </FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"e.g., Water availability, specific pest issues, market prices, nearby industries\" {...field} rows={3} />\n              </FormControl>\n              <FormDescription>\n                Include any other factors that might influence crop choice or yield.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button type=\"submit\" disabled={isLoading || isFetchingLocation} className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground py-3 text-base\">\n          {isLoading ? (\n            <>\n              <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              Predicting...\n            </>\n          ) : (\n            <>\n              <BrainCircuit className=\"mr-2 h-5 w-5\" />\n              Predict Suitable Crops\n            </>\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1530, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 1578, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/chart.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1913, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/prediction-results.tsx"],"sourcesContent":["\nimport Image from \"next/image\";\nimport type { ImproveCropSuggestionsOutput } from \"@/ai/flows/improve-crop-suggestions\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, AlertTriangle, Info, TrendingUp, BarChart2 } from \"lucide-react\"; // Added icons\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\"; // Import AspectRatio\nimport {\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n} from \"@/components/ui/chart\";\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis } from \"recharts\"; // Import chart components\n\ninterface PredictionResultsProps {\n  results: ImproveCropSuggestionsOutput | null;\n  error?: string | null;\n}\n\n// Helper to determine confidence level based on reasons/actions\nconst getConfidenceLevel = (reasons: string[], actions: string[]): 'High' | 'Medium' | 'Low' => {\n  const reasonCount = reasons.length;\n  const actionCount = actions.length;\n\n  if (reasonCount >= 3 && actionCount <= 1) return 'High';\n  if (reasonCount >= 2 && actionCount <= 2) return 'Medium';\n  // Add a condition for very few reasons/many actions being low\n  if (reasonCount < 2 || actionCount >= 3) return 'Low';\n  // Default case or intermediate cases\n  return 'Medium'; // Defaulting to Medium if not clearly High or Low\n}\n\n// Helper to get icon based on confidence\nconst getConfidenceIcon = (level: 'High' | 'Medium' | 'Low') => {\n  switch (level) {\n    case 'High': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n    case 'Medium': return <Info className=\"h-5 w-5 text-yellow-500\" />;\n    case 'Low': return <AlertTriangle className=\"h-5 w-5 text-red-500\" />;\n    default: return null;\n  }\n}\n\n// Placeholder chart data generation\nconst generateChartData = (cropName: string) => {\n  // Simple hash function to get somewhat consistent numbers based on crop name\n  let hash = 0;\n  for (let i = 0; i < cropName.length; i++) {\n    hash = (hash << 5) - hash + cropName.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  const baseYield = 50 + (Math.abs(hash) % 50); // Base yield between 50-100\n  const baseProfit = 1000 + (Math.abs(hash) % 1000); // Base profit between 1000-2000\n\n  return [\n    { metric: \"Est. Yield (units/acre)\", value: baseYield + (Math.random() * 20 - 10) }, // Add some randomness\n    { metric: \"Est. Profit ($/acre)\", value: baseProfit + (Math.random() * 500 - 250) },\n    { metric: \"Water Need (index)\", value: 30 + (Math.abs(hash) % 40) }, // 30-70\n    { metric: \"Nutrient Need (index)\", value: 40 + (Math.abs(hash) % 50) }, // 40-90\n  ];\n};\n\nexport function PredictionResults({ results, error }: PredictionResultsProps) {\n  if (error) {\n    return (\n      <Card className=\"border-destructive bg-destructive/10\">\n        <CardHeader>\n          <CardTitle className=\"text-destructive flex items-center gap-2\">\n             <AlertTriangle className=\"h-5 w-5\" /> Error Generating Predictions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-destructive\">{error}</p>\n           <p className=\"mt-2 text-sm text-muted-foreground\">Please check your input values, especially if using coordinates, or try again later.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!results || results.improvedSuggestions.length === 0) {\n    return (\n       <Card className=\"border-dashed border-muted mt-6\">\n         <CardHeader>\n           <CardTitle className=\"text-muted-foreground\">No Predictions Yet</CardTitle>\n         </CardHeader>\n         <CardContent>\n           <p className=\"text-muted-foreground\">Enter your farm details above and click \"Predict Suitable Crops\" to see AI-powered suggestions.</p>\n         </CardContent>\n       </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 mt-8\"> {/* Increased spacing */}\n       <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n          <TrendingUp className=\"h-6 w-6 text-primary\" />\n          AI Crop Suitability Analysis\n        </h2>\n      {results.improvedSuggestions.map((suggestion, idx) => {\n         const confidence = getConfidenceLevel(suggestion.reasons, suggestion.suggestedActions);\n         const confidenceIcon = getConfidenceIcon(confidence);\n         const chartData = generateChartData(suggestion.crop);\n\n          // Prepare data for simple bar chart (Example: Yield and Profit)\n           const barChartData = chartData.filter(d => d.metric.includes(\"Yield\") || d.metric.includes(\"Profit\"))\n             .map(d => ({ name: d.metric.split(' ')[1], value: Math.round(d.value) }));\n\n\n         return (\n          <Card key={`${suggestion.crop}-${idx}`} className=\"shadow-md hover:shadow-lg transition-shadow duration-200 overflow-hidden\">\n             <div className=\"grid grid-cols-1 md:grid-cols-3\">\n                {/* Image Section */}\n                 <div className=\"md:col-span-1 p-4 md:border-r\">\n                    <AspectRatio ratio={4 / 3} className=\"bg-muted rounded-md overflow-hidden\">\n                       <Image\n                          // Use crop name in seed for varied placeholders\n                          src={`https://picsum.photos/seed/${suggestion.crop.toLowerCase().replace(/\\s+/g, '-')}/400/300`}\n                          alt={`Placeholder image for ${suggestion.crop}`}\n                          width={400}\n                          height={300}\n                          className=\"object-cover w-full h-full\"\n                          data-ai-hint={`${suggestion.crop} field plant`} // AI hint for image generation\n                       />\n                    </AspectRatio>\n                     <p className=\"text-xs text-muted-foreground text-center mt-2\">Visual representation of {suggestion.crop} (Placeholder)</p>\n                 </div>\n\n                 {/* Details Section */}\n                 <div className=\"md:col-span-2\">\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start gap-4\">\n                         <div>\n                          <CardTitle className=\"text-xl\">{suggestion.crop}</CardTitle>\n                          <CardDescription>Potential suitability analysis based on your data.</CardDescription>\n                         </div>\n                         <Badge variant={confidence === 'High' ? 'default' : confidence === 'Medium' ? 'secondary' : 'destructive'} className=\"ml-auto flex items-center gap-1 flex-shrink-0 whitespace-nowrap mt-1\">\n                           {confidenceIcon}\n                           {confidence} Confidence\n                         </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4 pb-4\">\n                      <div>\n                        <h3 className=\"text-md font-semibold mb-1 flex items-center gap-1\"><Info className=\"h-4 w-4 text-blue-500\"/> Reasons for Suggestion:</h3>\n                        {suggestion.reasons.length > 0 ? (\n                            <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground pl-2\">\n                            {suggestion.reasons.map((reason, index) => (\n                                <li key={`reason-${idx}-${index}`}>{reason}</li>\n                            ))}\n                            </ul>\n                        ): (\n                             <p className=\"text-sm text-muted-foreground italic pl-2\">General suitability based on parameters.</p>\n                        )}\n                      </div>\n                      <div>\n                        <h3 className=\"text-md font-semibold mb-1 flex items-center gap-1\"><CheckCircle className=\"h-4 w-4 text-green-600\"/> Suggested Actions to Increase Confidence:</h3>\n                         {suggestion.suggestedActions.length > 0 ? (\n                            <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground pl-2\">\n                            {suggestion.suggestedActions.map((action, index) => (\n                                <li key={`action-${idx}-${index}`}>{action}</li>\n                            ))}\n                            </ul>\n                         ) : (\n                            <p className=\"text-sm text-muted-foreground italic pl-2\">High confidence based on provided data. Consider standard best practices.</p>\n                         )}\n                      </div>\n                    </CardContent>\n                    {/* Chart Section - Placed within the details Card for better layout */}\n                    <CardFooter className=\"flex-col items-start gap-2 pt-4 border-t\">\n                         <h3 className=\"text-md font-semibold flex items-center gap-1\"><BarChart2 className=\"h-4 w-4 text-purple-500\"/> Estimated Metrics (Placeholder):</h3>\n                         <div className=\"w-full h-[100px] text-xs\"> {/* Reduced height */}\n                             <ChartContainer config={{ value: { label: \"Value\", color: \"hsl(var(--primary))\" } }} className=\"h-full w-full\">\n                                <BarChart data={barChartData} margin={{ top: 5, right: 5, left: -25, bottom: 0 }}> {/* Adjusted margins */}\n                                <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                                 <XAxis dataKey=\"name\" tickLine={false} axisLine={false} tickMargin={8} />\n                                 <YAxis tickLine={false} axisLine={false} tickMargin={8} />\n                                 <ChartTooltip\n                                     cursor={false}\n                                     content={<ChartTooltipContent hideLabel />}\n                                    />\n                                <Bar dataKey=\"value\" fill=\"var(--color-value)\" radius={4} />\n                                </BarChart>\n                            </ChartContainer>\n                         </div>\n                         <p className=\"text-xs text-muted-foreground italic w-full text-right\">*Illustrative data based on input parameters.</p>\n                    </CardFooter>\n                 </div>\n            </div>\n          </Card>\n         )\n      })}\n    </div>\n  );\n}\n\n"],"names":[],"mappings":";;;;AACA;AAEA;AAQA;AACA,kYAAwF,cAAc;AAAtG;AAAA;AAAA;AAAA;AACA,wPAA4D,qBAAqB;AACjF;AAKA,wQAAuE,0BAA0B;AAAjG;AAAA;AAAA;AAAA;;;;;;;;;AAOA,gEAAgE;AAChE,MAAM,qBAAqB,CAAC,SAAmB;IAC7C,MAAM,cAAc,QAAQ,MAAM;IAClC,MAAM,cAAc,QAAQ,MAAM;IAElC,IAAI,eAAe,KAAK,eAAe,GAAG,OAAO;IACjD,IAAI,eAAe,KAAK,eAAe,GAAG,OAAO;IACjD,8DAA8D;IAC9D,IAAI,cAAc,KAAK,eAAe,GAAG,OAAO;IAChD,qCAAqC;IACrC,OAAO,UAAU,kDAAkD;AACrE;AAEA,yCAAyC;AACzC,MAAM,oBAAoB,CAAC;IACzB,OAAQ;QACN,KAAK;YAAQ,qBAAO,6LAAC,8NAAA,CAAA,cAAW;gBAAC,WAAU;;;;;;QAC3C,KAAK;YAAU,qBAAO,6LAAC,qMAAA,CAAA,OAAI;gBAAC,WAAU;;;;;;QACtC,KAAK;YAAO,qBAAO,6LAAC,2NAAA,CAAA,gBAAa;gBAAC,WAAU;;;;;;QAC5C;YAAS,OAAO;IAClB;AACF;AAEA,oCAAoC;AACpC,MAAM,oBAAoB,CAAC;IACzB,6EAA6E;IAC7E,IAAI,OAAO;IACX,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAAK;QACxC,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,SAAS,UAAU,CAAC;QAChD,QAAQ,GAAG,2BAA2B;IACxC;IAEA,MAAM,YAAY,KAAM,KAAK,GAAG,CAAC,QAAQ,IAAK,4BAA4B;IAC1E,MAAM,aAAa,OAAQ,KAAK,GAAG,CAAC,QAAQ,MAAO,gCAAgC;IAEnF,OAAO;QACL;YAAE,QAAQ;YAA2B,OAAO,YAAY,CAAC,KAAK,MAAM,KAAK,KAAK,EAAE;QAAE;QAClF;YAAE,QAAQ;YAAwB,OAAO,aAAa,CAAC,KAAK,MAAM,KAAK,MAAM,GAAG;QAAE;QAClF;YAAE,QAAQ;YAAsB,OAAO,KAAM,KAAK,GAAG,CAAC,QAAQ;QAAI;QAClE;YAAE,QAAQ;YAAyB,OAAO,KAAM,KAAK,GAAG,CAAC,QAAQ;QAAI;KACtE;AACH;AAEO,SAAS,kBAAkB,EAAE,OAAO,EAAE,KAAK,EAA0B;IAC1E,IAAI,OAAO;QACT,qBACE,6LAAC,mIAAA,CAAA,OAAI;YAAC,WAAU;;8BACd,6LAAC,mIAAA,CAAA,aAAU;8BACT,cAAA,6LAAC,mIAAA,CAAA,YAAS;wBAAC,WAAU;;0CAClB,6LAAC,2NAAA,CAAA,gBAAa;gCAAC,WAAU;;;;;;4BAAY;;;;;;;;;;;;8BAG1C,6LAAC,mIAAA,CAAA,cAAW;;sCACV,6LAAC;4BAAE,WAAU;sCAAoB;;;;;;sCAChC,6LAAC;4BAAE,WAAU;sCAAqC;;;;;;;;;;;;;;;;;;IAI3D;IAEA,IAAI,CAAC,WAAW,QAAQ,mBAAmB,CAAC,MAAM,KAAK,GAAG;QACxD,qBACG,6LAAC,mIAAA,CAAA,OAAI;YAAC,WAAU;;8BACd,6LAAC,mIAAA,CAAA,aAAU;8BACT,cAAA,6LAAC,mIAAA,CAAA,YAAS;wBAAC,WAAU;kCAAwB;;;;;;;;;;;8BAE/C,6LAAC,mIAAA,CAAA,cAAW;8BACV,cAAA,6LAAC;wBAAE,WAAU;kCAAwB;;;;;;;;;;;;;;;;;IAI9C;IAEA,qBACE,6LAAC;QAAI,WAAU;;YAAiB;0BAC7B,6LAAC;gBAAG,WAAU;;kCACX,6LAAC,qNAAA,CAAA,aAAU;wBAAC,WAAU;;;;;;oBAAyB;;;;;;;YAGlD,QAAQ,mBAAmB,CAAC,GAAG,CAAC,CAAC,YAAY;gBAC3C,MAAM,aAAa,mBAAmB,WAAW,OAAO,EAAE,WAAW,gBAAgB;gBACrF,MAAM,iBAAiB,kBAAkB;gBACzC,MAAM,YAAY,kBAAkB,WAAW,IAAI;gBAElD,gEAAgE;gBAC/D,MAAM,eAAe,UAAU,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,QAAQ,CAAC,WACxF,GAAG,CAAC,CAAA,IAAK,CAAC;wBAAE,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;wBAAE,OAAO,KAAK,KAAK,CAAC,EAAE,KAAK;oBAAE,CAAC;gBAG3E,qBACC,6LAAC,mIAAA,CAAA,OAAI;oBAAmC,WAAU;8BAC/C,cAAA,6LAAC;wBAAI,WAAU;;0CAEX,6LAAC;gCAAI,WAAU;;kDACZ,6LAAC,8IAAA,CAAA,cAAW;wCAAC,OAAO,IAAI;wCAAG,WAAU;kDAClC,cAAA,6LAAC,gIAAA,CAAA,UAAK;4CACH,gDAAgD;4CAChD,KAAK,CAAC,2BAA2B,EAAE,WAAW,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAAC;4CAC/F,KAAK,CAAC,sBAAsB,EAAE,WAAW,IAAI,EAAE;4CAC/C,OAAO;4CACP,QAAQ;4CACR,WAAU;4CACV,gBAAc,GAAG,WAAW,IAAI,CAAC,YAAY,CAAC;;;;;;;;;;;kDAGnD,6LAAC;wCAAE,WAAU;;4CAAiD;4CAA0B,WAAW,IAAI;4CAAC;;;;;;;;;;;;;0CAI5G,6LAAC;gCAAI,WAAU;;kDACZ,6LAAC,mIAAA,CAAA,aAAU;kDACT,cAAA,6LAAC;4CAAI,WAAU;;8DACZ,6LAAC;;sEACA,6LAAC,mIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAW,WAAW,IAAI;;;;;;sEAC/C,6LAAC,mIAAA,CAAA,kBAAe;sEAAC;;;;;;;;;;;;8DAElB,6LAAC,oIAAA,CAAA,QAAK;oDAAC,SAAS,eAAe,SAAS,YAAY,eAAe,WAAW,cAAc;oDAAe,WAAU;;wDAClH;wDACA;wDAAW;;;;;;;;;;;;;;;;;;kDAInB,6LAAC,mIAAA,CAAA,cAAW;wCAAC,WAAU;;0DACrB,6LAAC;;kEACC,6LAAC;wDAAG,WAAU;;0EAAqD,6LAAC,qMAAA,CAAA,OAAI;gEAAC,WAAU;;;;;;4DAAyB;;;;;;;oDAC3G,WAAW,OAAO,CAAC,MAAM,GAAG,kBACzB,6LAAC;wDAAG,WAAU;kEACb,WAAW,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,sBAC7B,6LAAC;0EAAmC;+DAA3B,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,OAAO;;;;;;;;;6EAIpC,6LAAC;wDAAE,WAAU;kEAA4C;;;;;;;;;;;;0DAGhE,6LAAC;;kEACC,6LAAC;wDAAG,WAAU;;0EAAqD,6LAAC,8NAAA,CAAA,cAAW;gEAAC,WAAU;;;;;;4DAA0B;;;;;;;oDAClH,WAAW,gBAAgB,CAAC,MAAM,GAAG,kBACnC,6LAAC;wDAAG,WAAU;kEACb,WAAW,gBAAgB,CAAC,GAAG,CAAC,CAAC,QAAQ,sBACtC,6LAAC;0EAAmC;+DAA3B,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,OAAO;;;;;;;;;6EAIrC,6LAAC;wDAAE,WAAU;kEAA4C;;;;;;;;;;;;;;;;;;kDAKjE,6LAAC,mIAAA,CAAA,aAAU;wCAAC,WAAU;;0DACjB,6LAAC;gDAAG,WAAU;;kEAAgD,6LAAC,mOAAA,CAAA,YAAS;wDAAC,WAAU;;;;;;oDAA2B;;;;;;;0DAC9G,6LAAC;gDAAI,WAAU;;oDAA2B;kEACtC,6LAAC,oIAAA,CAAA,iBAAc;wDAAC,QAAQ;4DAAE,OAAO;gEAAE,OAAO;gEAAS,OAAO;4DAAsB;wDAAE;wDAAG,WAAU;kEAC5F,cAAA,6LAAC,uJAAA,CAAA,WAAQ;4DAAC,MAAM;4DAAc,QAAQ;gEAAE,KAAK;gEAAG,OAAO;gEAAG,MAAM,CAAC;gEAAI,QAAQ;4DAAE;;gEAAG;8EAClF,6LAAC,gKAAA,CAAA,gBAAa;oEAAC,UAAU;oEAAO,iBAAgB;;;;;;8EAC/C,6LAAC,wJAAA,CAAA,QAAK;oEAAC,SAAQ;oEAAO,UAAU;oEAAO,UAAU;oEAAO,YAAY;;;;;;8EACpE,6LAAC,wJAAA,CAAA,QAAK;oEAAC,UAAU;oEAAO,UAAU;oEAAO,YAAY;;;;;;8EACrD,6LAAC,oIAAA,CAAA,eAAY;oEACT,QAAQ;oEACR,uBAAS,6LAAC,oIAAA,CAAA,sBAAmB;wEAAC,SAAS;;;;;;;;;;;8EAE5C,6LAAC,sJAAA,CAAA,MAAG;oEAAC,SAAQ;oEAAQ,MAAK;oEAAqB,QAAQ;;;;;;;;;;;;;;;;;;;;;;;0DAI9D,6LAAC;gDAAE,WAAU;0DAAyD;;;;;;;;;;;;;;;;;;;;;;;;mBA3E1E,GAAG,WAAW,IAAI,CAAC,CAAC,EAAE,KAAK;;;;;YAiF1C;;;;;;;AAGN;KAnIgB","debugId":null}},
    {"offset": {"line": 2501, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,6LAAC,wKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;;AAIf,UAAU,WAAW,GAAG,wKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2539, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-initial-parameters.ts"],"sourcesContent":["// Use server directive.\n'use server';\n\n/**\n * @fileOverview Provides initial crop parameters based on a general location description and desired crops.\n *\n * - generateInitialParameters - A function that generates initial parameters for crop prediction.\n * - GenerateInitialParametersInput - The input type for the generateInitialParameters function.\n * - GenerateInitialParametersOutput - The return type for the generateInitialParameters function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateInitialParametersInputSchema = z.object({\n  locationDescription: z.string().describe('A general description of the location, e.g., \"near the coast of California\".'),\n  desiredCrops: z.string().describe('A comma-separated list of desired crops, e.g., \"tomatoes, lettuce, strawberries\".'),\n});\nexport type GenerateInitialParametersInput = z.infer<typeof GenerateInitialParametersInputSchema>;\n\nconst GenerateInitialParametersOutputSchema = z.object({\n  soilType: z.string().describe('The predicted soil type for the given location.'),\n  climateConditions: z.string().describe('A description of the predicted climate conditions for the given location.'),\n  historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n  otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n});\nexport type GenerateInitialParametersOutput = z.infer<typeof GenerateInitialParametersOutputSchema>;\n\nexport async function generateInitialParameters(input: GenerateInitialParametersInput): Promise<GenerateInitialParametersOutput> {\n  return generateInitialParametersFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateInitialParametersPrompt',\n  input: {\n    schema: z.object({\n      locationDescription: z.string().describe('A general description of the location.'),\n      desiredCrops: z.string().describe('A comma-separated list of desired crops.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      soilType: z.string().describe('The predicted soil type for the given location.'),\n      climateConditions: z.string().describe('A description of the predicted climate conditions for the given location.'),\n      historicalYieldData: z.string().describe('An estimate of the historical yield data for the specified crops in the given location.'),\n      otherRelevantParameters: z.string().describe('Any other parameters relevant to crop prediction for the specified location and crops.'),\n    }),\n  },\n  prompt: `You are an expert agricultural consultant. A user is starting a crop planning application and needs initial parameters for their location and desired crops.\n\n  Based on the following information, provide initial parameters that the user can use. Be as specific as possible.\n\n  Location Description: {{{locationDescription}}}\n  Desired Crops: {{{desiredCrops}}}\n\n  Output the following parameters:\n  - soilType: The predicted soil type for the given location.\n  - climateConditions: A description of the predicted climate conditions for the given location, including average temperature and rainfall.\n  - historicalYieldData: An estimate of the historical yield data (e.g., tons per acre) for the specified crops in the given location.\n  - otherRelevantParameters: Any other parameters that might be relevant to crop prediction, such as pest pressure or market demand.\n  `,\n});\n\nconst generateInitialParametersFlow = ai.defineFlow<\n  typeof GenerateInitialParametersInputSchema,\n  typeof GenerateInitialParametersOutputSchema\n>(\n  {\n    name: 'generateInitialParametersFlow',\n    inputSchema: GenerateInitialParametersInputSchema,\n    outputSchema: GenerateInitialParametersOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;;IA4BF","debugId":null}},
    {"offset": {"line": 2552, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/improve-crop-suggestions.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Flow to improve crop suggestions by providing reasons and actions.\n *\n * - improveCropSuggestions - A function that takes crop suggestions and provides reasons and actions to increase confidence.\n * - ImproveCropSuggestionsInput - The input type for the improveCropSuggestions function.\n * - ImproveCropSuggestionsOutput - The return type for the improveCropSuggestions function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst ImproveCropSuggestionsInputSchema = z.object({\n  cropSuggestions: z\n    .array(z.string())\n    .describe('An array of suggested crops for the given conditions.'),\n  location: z.string().describe('The location for which the crop suggestions are made.'),\n  soilType: z.string().describe('The soil type of the location.'),\n  climateConditions: z.string().describe('The climate conditions of the location.'),\n  historicalYieldData: z.string().describe('Historical yield data for the location.'),\n});\nexport type ImproveCropSuggestionsInput = z.infer<\n  typeof ImproveCropSuggestionsInputSchema\n>;\n\nconst ImproveCropSuggestionsOutputSchema = z.object({\n  improvedSuggestions: z.array(\n    z.object({\n      crop: z.string().describe('The suggested crop.'),\n      reasons: z.array(z.string()).describe('Reasons for suggesting the crop.'),\n      suggestedActions: z\n        .array(z.string())\n        .describe('Suggested actions to increase confidence in the crop.'),\n    })\n  ),\n});\nexport type ImproveCropSuggestionsOutput = z.infer<\n  typeof ImproveCropSuggestionsOutputSchema\n>;\n\nexport async function improveCropSuggestions(\n  input: ImproveCropSuggestionsInput\n): Promise<ImproveCropSuggestionsOutput> {\n  return improveCropSuggestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'improveCropSuggestionsPrompt',\n  input: {\n    schema: z.object({\n      cropSuggestions: z\n        .array(z.string())\n        .describe('An array of suggested crops for the given conditions.'),\n      location: z.string().describe('The location for which the crop suggestions are made.'),\n      soilType: z.string().describe('The soil type of the location.'),\n      climateConditions: z.string().describe('The climate conditions of the location.'),\n      historicalYieldData: z.string().describe('Historical yield data for the location.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      improvedSuggestions: z.array(\n        z.object({\n          crop: z.string().describe('The suggested crop.'),\n          reasons: z.array(z.string()).describe('Reasons for suggesting the crop.'),\n          suggestedActions: z\n            .array(z.string())\n            .describe('Suggested actions to increase confidence in the crop.'),\n        })\n      ),\n    }),\n  },\n  prompt: `For the following crop suggestions, provide reasons for the suggestions and suggested actions to increase confidence in the crop. Consider the location, soil type, climate conditions and historical yield data.\n\nCrop Suggestions: {{{cropSuggestions}}}\nLocation: {{{location}}}\nSoil Type: {{{soilType}}}\nClimate Conditions: {{{climateConditions}}}\nHistorical Yield Data: {{{historicalYieldData}}}\n\nFormat the output as a JSON array of objects, where each object has the following keys:\n- crop: The suggested crop.\n- reasons: An array of reasons for suggesting the crop.\n- suggestedActions: An array of suggested actions to increase confidence in the crop.\n\nMake sure that the suggested actions are concrete and actionable.\n`,\n});\n\nconst improveCropSuggestionsFlow = ai.defineFlow<\n  typeof ImproveCropSuggestionsInputSchema,\n  typeof ImproveCropSuggestionsOutputSchema\n>(\n  {\n    name: 'improveCropSuggestionsFlow',\n    inputSchema: ImproveCropSuggestionsInputSchema,\n    outputSchema: ImproveCropSuggestionsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IAyCsB","debugId":null}},
    {"offset": {"line": 2564, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState } from \"react\";\nimport type * as z from \"zod\";\nimport { CropForm } from \"@/components/crop-form\";\nimport { PredictionResults } from \"@/components/prediction-results\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { generateInitialParameters, type GenerateInitialParametersInput, type GenerateInitialParametersOutput } from \"@/ai/flows/generate-initial-parameters\";\nimport { improveCropSuggestions, type ImproveCropSuggestionsInput, type ImproveCropSuggestionsOutput } from \"@/ai/flows/improve-crop-suggestions\";\nimport type { CropFormSchema } from \"@/schemas/crop-form-schema\";\nimport { Leaf, AlertCircle, Loader2 } from \"lucide-react\"; // Added Loader2 import\n\n\nexport default function Home() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [predictionResults, setPredictionResults] = useState<ImproveCropSuggestionsOutput | null>(null);\n  const [formError, setFormError] = useState<string | null>(null); // Changed state name for clarity\n  const { toast } = useToast();\n\n  const handleFormSubmit = async (values: z.infer<typeof CropFormSchema>) => {\n    setIsLoading(true);\n    setFormError(null);\n    setPredictionResults(null); // Clear previous results\n\n    // Basic validation for location before calling AI\n     if (!values.location || values.location.trim().length < 3) {\n         setFormError(\"Please provide a valid location (at least 3 characters).\");\n         toast({\n           title: \"Input Error\",\n           description: \"Location is required.\",\n           variant: \"destructive\",\n         });\n         setIsLoading(false);\n         return;\n     }\n\n\n    try {\n      // Step 1: Generate initial parameters if some optional fields are missing\n      let initialParams: GenerateInitialParametersOutput | null = null;\n      const needsInitialParams = !values.soilType || !values.climateConditions || !values.historicalYieldData;\n\n      if (needsInitialParams) {\n        const initialParamsInput: GenerateInitialParametersInput = {\n          locationDescription: values.location,\n          desiredCrops: values.desiredCrops || \"common crops for the area\",\n        };\n        toast({\n          title: \"Estimating Missing Details...\",\n          description: \"Using AI to fill in blanks for soil, climate, and yield.\",\n        });\n        initialParams = await generateInitialParameters(initialParamsInput);\n        toast({\n           title: \"Farm Details Estimated\",\n           description: \"AI provided estimates for missing parameters.\",\n           variant: \"default\",\n         });\n      }\n\n      // Step 2: Prepare input for crop suggestion improvement\n       const improveInput: ImproveCropSuggestionsInput = {\n         cropSuggestions: values.desiredCrops ? values.desiredCrops.split(',').map(s => s.trim()).filter(s => s) : [],\n         location: values.location,\n         soilType: values.soilType || initialParams?.soilType || \"Not Specified\", // Use more descriptive fallback\n         climateConditions: values.climateConditions || initialParams?.climateConditions || \"Not Specified\",\n         historicalYieldData: values.historicalYieldData || initialParams?.historicalYieldData || \"Not Specified\",\n       };\n\n       // If no desired crops provided, inform the user and adjust input for AI\n       if (improveInput.cropSuggestions.length === 0) {\n            toast({\n              title: \"Finding Suitable Crops...\",\n              description: \"No specific crops desired, AI will suggest based on location data.\",\n            });\n            // Provide context to the AI that it should generate initial suggestions\n            // Modify the prompt or add a flag if the AI needs explicit instruction for this.\n            // For now, send an empty array or a hint like [\"suggest based on parameters\"]\n             improveInput.cropSuggestions = [\"suggest based on parameters\"]; // Signal to AI\n       } else {\n           toast({\n                title: \"Analyzing Your Choices...\",\n                description: \"Evaluating desired crops and suggesting others.\",\n              });\n       }\n\n\n      // Step 3: Call the improveCropSuggestions flow\n      const results = await improveCropSuggestions(improveInput);\n\n      // Filter out the placeholder if it was used\n       if (results.improvedSuggestions.some(s => s.crop === \"suggest based on parameters\")) {\n            results.improvedSuggestions = results.improvedSuggestions.filter(s => s.crop !== \"suggest based on parameters\");\n       }\n\n\n      setPredictionResults(results);\n\n      if (results.improvedSuggestions.length > 0) {\n        toast({\n            title: \"Analysis Complete!\",\n            description: \"Crop suggestions and insights are ready below.\",\n            variant: \"default\",\n        });\n      } else {\n         toast({\n              title: \"Analysis Complete\",\n              description: \"No specific crop suggestions generated based on the input. Review parameters.\",\n              variant: \"default\", // Still success, just no results\n            });\n      }\n\n\n    } catch (err: any) {\n      console.error(\"Prediction process failed:\", err);\n      // Try to get a more specific message from Genkit errors\n      const specificError = err.details || err.message || \"An unexpected error occurred during AI processing.\";\n      const userMessage = `Failed to generate predictions. ${specificError.length < 100 ? specificError : 'Please check console for details.'}`;\n      setFormError(userMessage);\n      toast({\n        title: \"Prediction Error\",\n        description: userMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"container mx-auto p-4 md:p-8 lg:max-w-6xl\"> {/* Wider max-width */}\n       <header className=\"flex flex-col sm:flex-row items-center justify-between gap-3 mb-8 border-b pb-4\">\n          <div className=\"flex items-center gap-3\">\n             <Leaf className=\"h-10 w-10 text-primary\" />\n             <div>\n                <h1 className=\"text-3xl font-bold text-primary\">CropWise</h1>\n                <p className=\"text-muted-foreground\">AI-Powered Crop Suitability & Planning</p>\n             </div>\n          </div>\n           {/* Optional: Add a small link or button here if needed */}\n       </header>\n\n      <div className=\"grid grid-cols-1 gap-10\"> {/* Increased gap */}\n         <Card className=\"shadow-lg border border-primary/20\"> {/* Enhanced card styling */}\n           <CardHeader>\n             <CardTitle className=\"text-2xl\">Farm & Location Data</CardTitle>\n             <CardDescription>\n               Enter details about your farm. The more information you provide (location, soil, climate), the better the AI predictions will be. Use the map to visualize.\n             </CardDescription>\n           </CardHeader>\n           <CardContent>\n            {formError && (\n               <div className=\"mb-4 p-3 bg-destructive/10 border border-destructive text-destructive rounded-md flex items-center gap-2 text-sm\">\n                   <AlertCircle className=\"h-4 w-4\"/>\n                   {formError}\n               </div>\n            )}\n            <CropForm onSubmit={handleFormSubmit} isLoading={isLoading} />\n           </CardContent>\n         </Card>\n\n         <Separator />\n\n         {/* Results Section - Conditionally render based on loading/results */}\n         {isLoading && (\n            <div className=\"text-center py-10\">\n                <Loader2 className=\"h-8 w-8 animate-spin mx-auto text-primary mb-2\"/>\n                <p className=\"text-muted-foreground\">Analyzing data and generating predictions...</p>\n            </div>\n         )}\n\n         {!isLoading && (predictionResults || formError) && (\n             <PredictionResults results={predictionResults} error={formError} />\n         )}\n\n         {!isLoading && !predictionResults && !formError && (\n             <Card className=\"border-dashed border-muted mt-6 bg-background/50\">\n               <CardHeader>\n                 <CardTitle className=\"text-muted-foreground font-normal\">Prediction Area</CardTitle>\n               </CardHeader>\n               <CardContent className=\"text-center py-10\">\n                 <p className=\"text-muted-foreground\">Enter your farm details above and click \"Predict Suitable Crops\" to get AI-driven insights.</p>\n               </CardContent>\n             </Card>\n         )}\n\n\n       </div>\n\n       <footer className=\"mt-16 text-center text-sm text-muted-foreground border-t pt-6\">\n           Powered by Google Cloud AI & Firebase\n       </footer>\n    </main>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}